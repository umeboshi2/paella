.. -*- mode: rst -*-

===========================
Paella Notes
===========================

.. contents:: :backlinks: entry


Local Debian Repository
------------------------------------

In order to get the best use from paella, it is likely that you will need to have 
your own repository of locally built packages and a mirror of the official 
debian repository.  The mirror can be a partial mirror.

There used to be a package distributed with paella that helped with making 
a mirror and keeping a repository of locally built packages, but this has been 
made obsolete by packages like debmirror and reprepro.  If you choose to use 
debmirror to mirror the debian repository, you will still need another program 
to help manage packages made locally.  The debarchiver package is a 
good choice here.  I used to use mini-dinstall for this, but I found that debarchiver 
does a better job on creating the archive format.

I am using reprepro to handle this, since it will both mirror the official repository 
and you can add packages that you build to it.  It also uses the pool structure, 
signs the Release files, and can make partial mirrors.  Using reprepro is 
highly recommended.


Database Maintenance
-------------------------------------------------------

At the moment, there is no code to help maintain the database.  There are two 
areas in the database that could use some code to help keep the database in 
good working order.

The first area is the package lists that is generated from the debian mirror.  
While the code exists to initially fill the table, there is no code to keep the 
package list updated.  The code required to do this would need to be fairly 
complex as it would have to update each row with the newer version of a 
package, add packages that are not already in the table, and remove packages 
that are no longer available.  Some extra complexity is involved when packages 
are to be removed, as some of them may be used in the traits.  So the code 
would need to look for the packages that are to be removed first, and inform 
the database admin if there are traits that reference any of those packages.

At the moment, the way that I've been updating the package lists is to export 
the database using the xml format, dropping the database, creating a new 
database with the same name, then importing the last export.  This is an 
ugly way to keep the package list updated, and I'd like to keep from having 
to drop the database, or remove large parts of it just to update the package 
lists.  This method also hurts if you use extra tables in the database to keep 
parts of the configuration, as paella is designed to allow the administrator 
to be able to use the database to store the configuration.  Even if the schema 
that paella uses isn't appropriate to hold the configuration for a server, group 
of users, or whatever, the administrator is free to make a set of tables that 
can hold the configuration and use them from the paella scripts.

The second area is the textfiles table that stores all of the templates and 
scripts.  When you delete a template or script from a trait, or machine, the 
actual file remains in the textfiles table.  Since the database uses foreign 
keys to determine which text file is being used for what purpose, the code 
to do this would be rather simple.  The code would simply attempt to delete 
all of the rows in the textfiles table, one by one.  The text files that are being 
used by traits or machines would not be deleted, since deleting them would 
violate foreign key constraints.  The text files that are not being referenced 
would be deleted.  Since this method is rather simple, compared to keeping 
the package lists up to date, it will probably be added at some point in the 
future.


External Editor/Differ
---------------------------------

Spawning the external programs in the paella-management application 
will cause the interface to freeze until the external process has been 
terminated.  This can be troublesome, because there are times when 
you would want to read some of your config through the application while 
writing your scripts, or editing a template.  I have refrained from running 
the external process in the background to avoid complications that could 
result from doing this.  One of the workarounds that I use is to save the 
file that I'm editing to another filename, then closing out the editor.  I then 
start the editor from the command line and edit the file while being able 
to access the gui as a reference.  When I'm done, I spawn the external 
editor from paella-management and replace the contents with the file that 
I just edited.  Doing this is rather easy if you are using emacs or xemacs 
as your editor.


Memory Usage
--------------------------------

Paella seems to use more memory than I would like it to use.  I am not 
very knowledgable on how to handle this.  My focus has been in this order:

1.  Make sure the code works correctly.
2.  Make sure the code is clean and modular.
3.  Avoid unnecessary complexity when possible.
4.  Try to keep from duplicating code and instantiating objects more than necessary.
5.  Make sure the code isn't too slow.
6.  Try to keep database queries at a minimum.
7.  Make sure paella isn't excessively hogging memory.

As you can see, the memory constraint is at the bottom of the list.  Using top 
to estimate, the paella-management application uses about 75M VIRT, and 
35M RSS.  The paella-machine-installer seems to use about 11M of memory.  
Most of the memory seems to come from just loading all of the modules required 
to run paella.

/root/paella
------------------------------------------

While paella is not required to be installed on the target system and the target 
systems don't need any special packages in order for paella to work, the installer 
does leave some files on the target system.  This behaviour should be optional, but 
it isn't at the moment.  Paella uses /root/paella on the target system as the place 
where these files are stored.  Basically what is stored here are a list of the traits 
that are supposed to be installed, a list of traits that are actually installed, the 
original files present on the system before they are replaced by templates, and a 
copy of the logfile from the installer.

The trait lists are there to make it easy to determine whether all the traits were 
installed properly, and where the installer stopped if it didn't install properly.

The original files that are replaced by templates are useful to determine the 
changes made to a default system by the templates.  This may help if you 
need to modify the templates, or if there have been updates to packages that 
have changed the config files, and your templates are based off of an older 
version.

In the future, I may make this behaviour optional, but it is a very low priority.  The 
files usually don't take up too much space, and it's easy just to rm -fr /root/paella 
after the install is complete.

Packages Interfering with the Install
-----------------------------------------------------------------------

There are some packages that will change the behaviour of apt when they are installed.  
Some examples are apt-listchanges and apt-listbugs.  These packages will by default 
stop the installation waiting on input from the user.  The system administrator should 
be aware of these packages by keeping an eye on the installation logs and noticing 
which packages are causing these problems.  Often it is necessary to configure these 
packages in a way that will allow for the installation to proceed automatically, and then 
reconfigure them at the end of the installation.  In the default database, the final trait is 
used to perform this type of function.

The paella framework will probably never handle packages like these, as it's difficult 
to determine how many packages may behave like this, and some packages may need 
to be treated differently than others.  Similar problems can occur with packages that 
modify the way libnss does host, user, or group lookups.  This can interfere with the 
installation process also.  It is also possible that you might install the machine on one 
network, but it's meant to be run in another network, and it's configuration won't be 
complete until it's present on that network.

Normally the way I handle these packages is to have two sets of templates in the 
traits responsible for these packages.  The first set is a configuration that keeps 
the installer working and lets it finish the install.  The second set is the actual 
configuration and it is usually stored in a place like "/root/paella/real-templates" on 
the target system.  The final trait will look for files in this directory and move them 
to the proper destination.  Also, scripts may need to be made that configure certain 
services on the first boot of the machine.  These scripts should be set to run on 
booting the machine, and either be idempotent, or remove themselves from being 
started after successful execution.  Another way around this is to use a helper 
configuration system, like cfengine or bcfg2 where you can place some of the 
configuration there and have the installed machine update from the configuration 
server.  It may also be possible to do this with paella in the future when paella 
moves into being able to update the configuration of a running machine.

I have tried to make paella flexible enough be able to do these things, but it also 
requires some knowledge and creativity from the system administrator who is 
creating the system in order identify and work around these types of problems.



Other Notes
--------------------------------

Target Filesystem
!!!!!!!!!!!!!!!!!!!!!!!!!!

After installation, the target filesystem remains mounted.  It should unmount 
cleanly on a reboot, but it may be desirable to have the installer unmount it 
at the end of the install.

Sharing Database Connections
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Connections to the database are shared as much as possible.  The 
paella-management application only uses a single connection to the database.  
The installer also only uses a single connection, but any scripts that need to 
connect to the database will use a separate connection.  This means that 
each machine that's being installed may require at least two connections to the 
database.  This can add up when installing a network of machines.  It is probably 
possible to use pgpool on the installer and connect through it, keeping the number 
of connections down to one per machine.

Network Requirements
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Paella has not been heavily tested using a live cd to load the installer.  There should 
be no requirement for an nfs server to be present on the network for the installer to 
work.  The only requirements for the network should be for the database server and
web server for the debian mirror.  DNS and DHCP are not really required to be present 
on the network, but it really helps to have them.  

Automated Installs
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

If you are using automated installs, the identification for the machine is done by the 
mac addresses of the ethernet devices on the machine, and they are matched in the 
database.  There is no need to use dhcp or pxe for identifying the machines (but you 
will probably need dhcp to assign an ip address to the machine).

Paella Database User
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

The installer connects to the database as the paella database user.  This account is 
limited, and has read only access to all of the paella tables, with the exception of the 
current_environment table and default_environment table.  It has full write access to 
the current_environment table, and only insert access to the default_environment 
table.  If you wish to store sensitive data, such as plaintext passwords in the 
database, you will make sure that the network that you install with is separated from 
the rest of the network environment.  A good way to do this is have the database on a 
laptop (or portable machine)  and detach the machines that you will install from the rest 
of the network, using a separate switch or hub.  You may want to use a firewall so that 
you can connect to a debian mirror, or the internet, but you will need to be sure that all 
the machines on the local network that you are using are completely under your control.

Template Tags
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

While the template tags are ugly and difficult to type, they were chosen for visibility and 
uniqueness.  When the template style was first developed, there were not any templating 
engines available for python.  Cheetah had just begun, and the other alternative was to 
use the python dictionary expansion (and these tags are more difficult to spot, and easier 
to make errors).  I had thought about using a tag style that was more familiar, but decided 
against it later, as it would likely make editing templates that already have similar tags 
confusing.

I have made a key binding for emacs/xemacs to help create the tags.  Just add this line to 
your custom.el::

     (global-set-key "\C-x\\" "<--||-->\C-b\C-b\C-b\C-b")

This will create an empty tag, and place the cursor in the center of the tag.

If you are running KDE, you can also use khotkeys to make a similar shortcut combo 
that does the same thing.





toc_

.. _toc: index.html

-------------------------------------------------

.. _mounts: #mount
.. _families: #family
.. _profiles: #profile
.. _filesystems: #filesystem
.. _machine_type: #machine-type
.. _machine_types: #machine-type
.. _traits: #trait
.. _machines: #machine
