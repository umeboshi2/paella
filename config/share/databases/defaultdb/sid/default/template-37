(custom-set-variables
 '(abbrev-mode t t)
 '(sgml-auto-insert-required-elements t)
 '(sgml-public-map (quote ("%S" "/usr/lib/sgml/%S" "/usr/lib/sgml/%o/%c/%d" "/usr/local/lib/sgml/%o/%c/%d")))
 '(paren-mode (quote sexp) nil (paren))
 '(ldap-host-parameters-alist (quote (("ummain" base "dc=umdomain"))))
 '(sgml-xml-declaration "/usr/lib/sgml/declaration/xml.dcl")
 '(sgml-system-path (quote ("/usr/lib/sgml" "/usr/lib/sgml/cdtd" "/usr/local/lib/sgml")))
 '(sgml-local-ecat-files (quote ("ECAT" "~/sgml/ECAT" "/usr/lib/sgml/ECAT" "/usr/local/lib/sgml/ECAT")))
 '(sgml-indent-data t t)
 '(sgml-indent-step 2 t)
 '(sgml-live-element-indicator t)
 '(delete-key-deletes-forward t)
 '(sgml-validate-command "nsgmls -e -g -s -u %s %s ")
 '(buffers-menu-submenus-for-groups-p t)
 '(sgml-display-char-list-filename "/usr/lib/sgml/charsets/iso88591.map" t)
 '(sgml-set-face (eq (quote x) window-system))
 '(gnuserv-program (concat exec-directory "/gnuserv"))
 '(ediff-split-window-function (quote split-window-horizontally))
 '(sgml-always-quote-attributes t t)
 '(sgml-tag-region-if-active t)
 '(sgml-omittag nil t)
 '(font-menu-this-frame-only-p t)
 '(sgml-markup-faces (quote ((start-tag . font-lock-keyword-face) (end-tag . font-lock-keyword-face) (ignored . font-lock-string-face) (ms-start . font-lock-type-face) (ms-end . font-lock-type-face) (shortref . bold) (entity . font-lock-reference-face) (comment . font-lock-comment-face) (pi . font-lock-variable-name-face) (sgml . font-lock-function-name-face) (doctype . font-lock-doc-string-face))))
 '(efs-ftp-program-name "sftp")
 '(sgml-local-catalogs (quote ("/usr/lib/sgml/catalog")))
 '(line-number-mode t)
 '(sgml-data-directory "/usr/lib/sgml/declaration/" t)
 '(sgml-auto-activate-dtd t)
 '(sgml-shortag nil t)
 '(sgml-minimize-attributes nil t)
 '(Manual-snip-subchapter nil t)
 '(sgml-custom-markup (quote (("Version1" "<![%Version1[]]>") ("New page" "<?NewPage>"))))
 '(complex-buffers-menu-p t)
 '(eudc-options-file "~/.xemacs/eudc-options")
 '(TeX-lisp-directory "/usr/share/xemacs21/packages/etc/auctex/" t)
 '(sgml-system-identifiers-are-preferred t)
 '(dired-chown-program "/bin/chown")
 '(eudc-protocol ldap))
(custom-set-faces
 '(default ((t (:foreground "cornsilk" :background "cornsilk4" :size "12pt" :family "Infernal" :dim nil :bold nil))) t)
 '(gui-button-face ((t (:foreground "yellow" :background "blue" :inverse-video t))) t)
 '(diff-file-header-face ((((class color) (background light)) (:background "grey40" :bold t))))
 '(secondary-selection ((t (:background "violet"))) t)
 '(widget-field-face ((((class grayscale color) (background light)) (:background "darkorange"))))
 '(red ((t (:foreground "red4"))) t)
 '(font-lock-string-face ((nil (:foreground "pale green" :size "8" :family "fixed"))))
 '(py-pseudo-keyword-face ((t (:foreground "light pink" :size "11" :family "Lucida"))) t)
 '(font-lock-reference-face ((((class color) (background light)) (:foreground "light salmon"))))
 '(diff-hunk-header-face ((((class color) (background light)) (:background "coral"))))
 '(xsl-xslt-alternate-face ((((background light)) (:foreground "LightSalmon" :bold t))))
 '(font-lock-doc-string-face ((((class color) (background light)) (:foreground "cyan1"))))
 '(modeline-mousable ((t (:foreground "aquamarine"))) t)
 '(font-lock-variable-name-face ((((class color) (background light)) (:foreground "aquamarine"))))
 '(paren-match ((t (:background "RosyBrown"))) t)
 '(diff-header-face ((((class color) (background light)) (:background "grey25"))))
 '(modeline-mousable-minor-mode ((t (:foreground "chocolate"))) t)
 '(xsl-xslt-main-face ((((background light)) (:foreground "pink" :bold t))))
 '(toolbar ((t (:foreground "green"))) t)
 '(py-builtins-face ((t (:foreground "yellow" :size "12" :bold nil))) t)
 '(font-lock-warning-face ((((class color) (background light)) (:foreground "hot pink" :bold t))))
 '(font-lock-keyword-face ((nil (:foreground "yellow" :size "10" :family "Infernal"))))
 '(font-lock-constant-face ((((class color) (background light)) (:foreground "SkyBlue"))))
 '(font-lock-type-face ((nil (:foreground "plum1" :size "7" :family "helvetica" :dim t :bold t))))
 '(primary-selection ((t (:background "coral"))) t)
 '(font-lock-comment-face ((nil (:foreground "light blue" :bold t))))
 '(font-lock-function-name-face ((nil (:foreground "turquoise" :size "10" :family "New Century Schoolbook" :bold t))))
 '(highlight ((t (:background "darkgrey"))) t)
 '(diff-index-face ((((class color) (background light)) (:background "coral" :bold t))))
 '(diff-context-face ((((class color) (background light)) (:foreground "plum")))))
;;=================================================================
;;                    scroll on  mouse wheel
;;=================================================================

;; scroll on wheel of mouses
(define-key global-map 'button4
  '(lambda (&rest args)
     (interactive) 
     (let ((curwin (selected-window)))
       (select-window (car (mouse-pixel-position)))
       (scroll-down 5)
       (select-window curwin)
       )))
(define-key global-map [(shift button4)]
  '(lambda (&rest args)
     (interactive) 
     (let ((curwin (selected-window)))
       (select-window (car (mouse-pixel-position)))
       (scroll-down 1)
       (select-window curwin)
       )))
(define-key global-map [(control button4)]
  '(lambda (&rest args)
     (interactive) 
     (let ((curwin (selected-window)))
       (select-window (car (mouse-pixel-position)))
       (scroll-down)
       (select-window curwin)
       )))

(define-key global-map 'button5
  '(lambda (&rest args)
     (interactive) 
     (let ((curwin (selected-window)))
       (select-window (car (mouse-pixel-position)))
       (scroll-up 5)
       (select-window curwin)
       )))
(define-key global-map [(shift button5)]
  '(lambda (&rest args)
     (interactive) 
     (let ((curwin (selected-window)))
       (select-window (car (mouse-pixel-position)))
       (scroll-up 1)
       (select-window curwin)
       )))
(define-key global-map [(control button5)]
  '(lambda (&rest args)
     (interactive) 
     (let ((curwin (selected-window)))
       (select-window (car (mouse-pixel-position)))
       (scroll-up)
       (select-window curwin)
       )))

(add-to-list 'auto-mode-alist '("\\.oe\\'" . sh-mode))
(add-to-list 'auto-mode-alist '("\\.xul\\'" . xml-mode))
(gnuserv-start)
(global-set-key "\C-x\C-c" nil)
(autoload 'pymacs-load "pymacs" nil t)
(autoload 'pymacs-eval "pymacs" nil t)
(autoload 'pymacs-apply "pymacs")
(autoload 'pymacs-call "pymacs")
(eval-after-load "pymacs"
'(add-to-list 'pymacs-load-path "pymacs"))
     
