#!/usr/bin/python
import os, sys

from useless.base.path import path

from paella.installer.toolkit import InstallerTools
from paella.db.aptkey import AptKeyHandler

print "post-install script for paellabase machine"

###############################################
paellarc_contents = """# configuration file for paella
[DEFAULT]
# these options are only referenced in this config file
__myhome:		~
__paelladir:		%%(__myhome)s/workspace/paella

[database]
# regular database info
dbhost:			%(hostname)s
dbname:			paella
#dbusername:		dbadmin
dbusername:		paella
dbpassword:		apassword

# this path is used to import and export information
# in the database.  These paths are used as hints in the
# gui and aren't needed for the command line.
default_path:		%%(__paelladir)s/config/share/databases

# the installer section is only needed on the installer system
# it is not needed for paella-management
[installer]

# this is to enable ugly stuff in the paella installers
enable_bad_hacks:	false

# a directory for storing generated files that would be needed later
# I put this in usr because it's mainly used on the nfsinstaller, and
# /var on the nfsinstaller uses tmpfs instead of nfs
paella_storage:		/usr/share/paella/storage

# use this one for machines other than the nfsinstaller
#paella_storage:		/var/cache/paella

# the directory that will hold tarfiles of clean bootstrapped suites
suite_storage:		%%(paella_storage)s/suites

# this is a list of suites that will be bootstrapped and tarred
bootstrap_suites:		sarge, etch

# the default is not to have the installer bootstrap,
# but extract tar files in suite_storage (quicker)
bootstrap_target:		false

# this is the location of the devices tarball that can be used
# in place of makedev
devices_tarball:		%%(paella_storage)s/devices.tar

# we default to using the devices tarball because it is quicker
# than running MAKEDEV
use_devices_tarball:	true

# the management_gui section is only needed for paella-management,
# it is not needed for the paella installer
[management_gui]

# this is the template that profiles will be created from
template_profile:		skeleton

# this is the path used to import and export client
# information and the paella database
# client information should be kept on a separate device
# for general security reasons
# the client information should be able to sit nicely
# on top of the base paella database
client_path:		%%(__myhome)s/clients

# only listbox_select is supported now
manager_type:		listbox_select

# The text editor must make an X window
text_editor:		kate

# The x_differ must make an X window
# the command must take these args -> x_differ left_file right_file
x_differ:			xxdiff
#x_differ:			kompare


# document colors
#traitdoc_bgcolor:			LightSkyBlue4
#traitdoc_section_title_color:		IndianRed
#traitdoc_package_table_color:	SkyBlue3
#traitdoc_template_table_color:	DarkSeaGreen3
#traitdoc_variables_table_color:	MistyRose3

_basecolor:			SkyBlue
traitdoc_bgcolor:			%%(_basecolor)s
traitdoc_section_title_color:		%%(_basecolor)s4
traitdoc_section_title_font_color:	%%(_basecolor)s1
traitdoc_package_table_color:	%%(_basecolor)s3
traitdoc_template_table_color:	%%(_basecolor)s3
traitdoc_variables_table_color:	%%(_basecolor)s3
"""
###############################################

rc_local_contents = '''#!/bin/sh -e
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

if ! [ -d /paellalog ]; then
    echo "creating /paellalog"
    mkdir /paellalog
fi

# run the dhclient to get an appropriate /etc/resolv.conf
dhclient


if [ -z `cat /proc/mounts | grep /paellalog` ]; then
    echo "mounting /paellalog"
    mount -t nfs %(hostname)s:/freespace/paellalog /paellalog
fi

# finally, run the paella nfs installer in the background

paella-init-installer  &

exit 0
'''
###############################################

skel_bashrc_lines = [
'sudo update-alternatives --install /usr/bin/editor editor /usr/bin/xemacs21 999',
'sudo update-alternatives --install /usr/bin/pager pager /usr/bin/most 999'
]

###############################################
paella_packages_contents = """bash-completion
eject file sudo vim-tiny

console-common locales

postgresql-client 
xemacs21
most
nfs-common
grub
syslinux
memtest86+
squashfs-tools

python-dnspython

paella-machine-installer

"""
###############################################




it = InstallerTools()

##############
ip_address = it.get('localnet:gateway')
hostname = it.get('global:hostname')
template_data = dict(ipaddr=ip_address, hostname=hostname)
##############

livedir = it.target / 'freespace/live'
if not livedir.isdir():
    print 'Creating', livedir
    livedir.makedirs()
    it.chroot(['chown', 'root:staff', '/freespace/live'])
    it.chroot(['chmod', 'g+w', '/freespace/live'])

print "copying config from /etc/live-helper"
cmd = 'cp -a /etc/live-helper/config /freespace/live'
live_config_owner = it.get('debianlive:live_config_owner')
it.chroot(['su', live_config_owner, '-c', cmd])


live_config_dir = livedir / 'config'
if not live_config_dir.isdir():
    raise RuntimeError , "%s isn't there." % live_config_dir

# create the directories that contain the
# include files
local_includes_dir = live_config_dir / 'chroot_local-includes'
local_includes_etc = local_includes_dir / 'etc'
print "creating %s" % local_includes_etc
local_includes_etc.makedirs()
local_includes_skel = local_includes_etc / 'skel'
print "creating %s" % local_includes_skel
local_includes_skel.makedirs()
sys.stdout.flush()

# create the include files
paellarc = local_includes_etc / 'paellarc'
paellarc.write_text(paellarc_contents % template_data)
print "%s created." % paellarc

rclocal = local_includes_etc / 'rc.local'
rclocal.write_text(rc_local_contents % template_data)
rclocal.chmod(0755)
print "%s created." % rclocal

bashrc = local_includes_skel / '.bashrc'
sysbashrc = it.target / 'etc/skel/.bashrc'
bashrc.write_text(sysbashrc.text())
bashrc.write_lines(skel_bashrc_lines, append=True)
print "%s created." % bashrc

# create the packageslists file
packages_lists_dir = live_config_dir / 'chroot_local-packageslists'
paella_list = packages_lists_dir / 'paella'
paella_list.write_text(paella_packages_contents)
print "%s created." % paella_list

sys.stdout.flush()

# add the chroot source
# these variables are not defined in the trait
# and need to be defined in either a family, profile or machine
# this is a sign that this part is pretty hacky, and needs to be
# straightened out sometime in the future
debline = it.get('debianlive:live_chroot_debline')
source_name = it.get('debianlive:live_chroot_source_name')
aptkey_name = it.get('debianlive:live_chroot_aptkey_name')
debhost = it.get('debianlive:live_chroot_debhost')
debhost_ip = it.get('debianlive:live_chroot_debhost_ip')

# define the filenames and directories for the chroot_source
chroot_source_basename = '%s.chroot' % source_name
chroot_source_gpg_basename = '%s.gpg' % chroot_source_basename
chroot_sources_dirname = live_config_dir / 'chroot_sources'
chroot_source_filename = chroot_sources_dirname / chroot_source_basename
chroot_source_gpg_filename = chroot_sources_dirname / chroot_source_gpg_basename

# create and fill the files
chroot_source_filename.write_text(debline)
print "created %s" % chroot_source_filename
handler = AptKeyHandler(it.conn)
key_data = handler.get_key(aptkey_name)
chroot_source_gpg_filename.write_text(key_data)
print "created %s" % chroot_source_gpg_filename


sys.stdout.flush()

# add debhost and debhost_ip to /etc/hosts
hosts_filename = it.target / 'etc/hosts'
line = '%s\t%s\n' % (debhost_ip, debhost)
hosts_filename.write_text(line, append=True)

print "updated /etc/hosts"
sys.stdout.flush()


script = """#!/bin/bash
pushd /freespace/live
lh_clean --purge
lh_build
./config/prepare-netboot
popd
"""


scriptfile = it.target / 'freespace/live/make-installer-image'
scriptfile.write_text(script)
scriptfile.chmod(0755)

#print "created %s" % scriptfile
#
#it.chroot(['/freespace/live/make-installer-image'])
#print "Paella neboot image created and prepared."



