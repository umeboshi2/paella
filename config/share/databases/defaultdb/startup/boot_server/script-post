#!/usr/bin/python
import os, sys
import commands
from os.path import join, isdir, isfile
import subprocess

from useless.base.path import path
from useless.base.util import makepaths, wget
from paella.installer.toolkit import InstallerTools
from paella.installer import nfsbootcd

class BadURI(RuntimeError):
    pass

def pxe_base_data(label, kernel=None, initrd=None, mntdev='nomount'):
    lines = ['# default paella boot server config',
             'default %s' % label,
             'prompt 1',
             'say "--------------------------"',
             'say "Paella Network Boot Server"',
             'say "--------------------------"',
             'say "mem for memtest(not here)"',
             'say "enter for paella installer"',
             'say "autoboot in 10 seconds"',
             'DISPLAY boot.msg',
             'f1 boot.msg',
             'f2 say "help me"',
             '#timeout 100',
             'timeout 10'
             ]
    lines.append('label %s' % label)
    if kernel is None:
        kernel = 'vmlinuz-%s' % label
    if initrd is None:
        initrd = 'initrd.img-%s' % label
    lines.append('kernel %s' % kernel)
    argline = 'append initrd=%s netdev=probe ip=dhcp' % initrd
    
    argline += ' devfs=%s root=/dev/nfs' % mntdev 
    lines.append(argline)
    lines.append('')
    return '\n'.join(lines)


def get_uri(kernel):
    print kernel
    cmd = 'apt-get --print-uris install %s' % kernel
    print cmd
    d = commands.getoutput(cmd)
    print d
    l = [l for l in d.split('\n') if l.find('.deb ') > -1 and l.find(k) > -1]
    if len(l) != 1:
        raise Exception, 'bad fooo %s' % l
    u = l[0].split("'")[1]
    return u

it = InstallerTools()

# it.target should already be path object
# but currently isn't so coercing here
target = path(it.target)
bpaella = target / 'boot' / 'paella'
pxecfg_path = bpaella / 'pxelinux.cfg'
makepaths(pxecfg_path)

pxelinux = target / 'usr/lib/syslinux/pxelinux.0'
debs = target / 'var/cache/apt/archives'
archives_dir = target / 'var/cache/apt/archives'
cmd = 'cp %s %s' % (pxelinux, bpaella)
subprocess.call(cmd, shell=True)



kernel = it.get('boot_server_default_kernel')
print 'kernel is %s' % kernel


kroot = bpaella / 'kroot'
makepaths(kroot)
os.chdir(kroot)

print 'cwd is', os.getcwd()

cmd = 'apt-get -y --download-only install %s' % kernel
cmd = it.chroot_command(cmd)
subprocess.call(cmd, shell=True)

#os.system('chroot %s apt-get --download-only install %s' % (it.target, kernel))
ls = archives_dir.listdir('*.deb')
print 'ls is', ls

kernel_packages = [x for x in ls if x.namebase[:len(kernel)] == kernel]
print 'kernel_packages', kernel_packages
if len(kernel_packages) == 1:
    kernel_package = kernel_packages[0]
else:
    raise RuntimeError, 'too many kernels -- aborting'

pkg_filename = archives_dir / kernel_package

makepaths(kroot / 'tmp')
subprocess.call('dpkg-deb -x %s tmp' % pkg_filename, shell=True)
subprocess.call('mkinitramfs -r tmp -o initrd.img-diskless', shell=True)
here = path.getcwd()
print 'here', here
print here.listdir()


subprocess.call('mv initrd.img-diskless ..')



#kernel_package_path = join(debs, kernel_package)
#makepaths(join(kroot, 'tmp'))
#os.system('dpkg-deb -x %s tmp' % kernel_package_path)
#os.system('mkinitrd -r tmp -o initrd.img-diskless')
#os.system('mv initrd.img-diskless ..')


default_cfg = pxecfg_path / 'default'
cfgfile = default_cfg.open('w')
cfgfile.write(pxe_base_data('firstarg', kernel='secondarg', mntdev='mntdevarg'))
cfgfile.close()

imagedir = kroot / 'tmp/boot'
kernel_images = [x for x in imagedir.listdir('vmlinuz*')]
print 'kernel_images', kernel_images
if len(kernel_images) == 1:
    kernel_image = kernel_images[0]
else:
    raise RuntimeError, 'too many kernel images -- aborting'

kernel_image_path = imagedir / kernel_image
subprocess.call('mv %s ..' % kernel_image_path, shell=True)
os.chdir(bpaella)
subprocess.call('ln -s %s vmlinuz-diskless' % kernel_image, shell=True)
# we need to clean this up below
# before continuing the script
sys.exit(0)

kernel_image = [x for x in os.listdir(join(kroot, 'tmp', 'boot')) if x[:7] == 'vmlinuz'][0]
kernel_image_path = join(kroot, 'tmp', 'boot', kernel_image)
os.system('mv %s ..' % kernel_image_path)
os.chdir(bpaella)
os.system('ln -s %s vmlinuz-diskless' % kernel_image)
default = file(join(pxecfg_path, 'default'), 'w')
mntdev = it.get('boot_server_mount_devfs')
default.write(pxe_base_data('diskless', kernel=kernel_image, mntdev=mntdev))
default.close()


#make bootable iso image in /boot/paella
#nfsbootcd.make_image(kernel=kernel)
itarget = '/tmp/isotarget'
nfsbootcd.setup_directory(itarget)
isodir = join(itarget, 'isolinux')
if not isdir(isodir):
    makepaths(isodir)
if not isfile(join(isodir,'isolinux.bin')):
    os.system('cp %s %s' % (join(it.target, 'usr/lib/syslinux/isolinux.bin'), isodir))
nfsbootcd.isolinuxcfg(itarget)
os.system('cp %s %s/vmlinuz' % (kernel_image, itarget))
os.system('mkisofs -V "paella-nfsboot" -r -pad -b isolinux/isolinux.bin -no-emul-boot -boot-load-size 4 -boot-info-table -o nfsboot.iso %s' % itarget)
os.system('rm %s -fr' % itarget)
