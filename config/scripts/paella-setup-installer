#!/usr/bin/env python
import os, sys
from os.path import join, dirname
from optparse import OptionParser
from tempfile import mkdtemp

from useless.base.path import path


from paella.base import PaellaConfig
from paella.base.util import get_architecture

from paella.installer.base import InstallerConnection
from paella.db import DefaultEnvironment

def get_base_suite(conn, suite):
    return conn.suitecursor.get_base_suite(suite)

def debootstrap_command(suite, rootpath, mirror='', script='', arch=None):
    if arch is None:
        arch = get_architecture()
    command = ['debootstrap', suite, rootpath]
    if arch:
        command = ['debootstrap', '--arch=%s' % arch, suite, rootpath]
    if mirror:
        command.append(mirror)
    if script:
        command.append(script)
    return command

        
def make_bootstrap_tarball(conn, suite):
    here = path.getcwd()
    config = DefaultEnvironment(conn)
    base_suite = get_base_suite(conn, suite)
    arch = get_architecture()
    tarball_basename = '%s-%s.tar.gz' % (base_suite, arch)
    suite_storage = path(config.get('installer', 'suite_storage'))
    tarball_filename = suite_storage / tarball_basename
    # if the tarball already exists, we're done
    if tarball_filename.exists():
        print "Tarball already exists for %s, %s" % (base_suite, arch)
        return
    print "Creating tarball for", suite
    directory = path(mkdtemp('debootstrap', base_suite))
    mirror = config.get('installer', 'http_mirror')
    command = debootstrap_command(base_suite, str(directory),
                                  mirror=mirror, arch=arch)
    subprocess.check_call(cmd)
    # remove debs
    aptcache = directory / 'var/cache/apt/archives'
    for filename in aptcache.walkfiles():
        if filename.endswith('.deb'):
            filename.remove()
        else:
            print "%s exists in the cache of downloaded debs"
    os.chdir(directory)
    tarcmd = ['tar', '--create', '--gzip', '--file', tarball_filename, '.']
    subprocess.check_call(tarcmd)
    print "%s created." % tarball_filename
    os.chdir(here)
    print "removing bootstrap directory"
    subprocess.check_call('rm', '-fr', directory)
    
    
def make_devices_tarball(suite_storage):
    raise RuntimeError , "don't call me, I'll call you later"

def setup_devices_tarball():
    msg = "This is just a reference, for when I make this function again"
    raise RuntimeError , msg
    here = os.getcwd()
    mydev = '/tmp/mydev'
    if os.path.exists(mydev):
        raise AlreadyExistsError, 'mydev is not supposed to be here'
    os.makedirs(mydev)
    os.chdir(mydev)
    print 'making generic devices'
    os.system('/sbin/MAKEDEV generic')
    print 'making tarball of devices'
    os.system('tar cf %s .' % devices_tarball)
    os.chdir(here)
    print 'removing %s' % mydev
    os.system('rm -fr %s' % mydev)

def main(opts, args):
    conn = InstallerConnection()
    config = DefaultEnvironment(conn)
    if not opts.remote:
        http_mirror = config.get('installer', 'http_mirror')
    else:
        http_mirror = opts.remote
    suites = conn.suitecursor.get_suites()
    for suite in suites:
        make_bootstrap_tarball(conn, suite)
        
        

parser = OptionParser()
parser.add_option('--mirror', action='store', type='string', dest='remote',
                  default='', help='mirror to debootstrap from')
parser.add_option('--make-devices_tarball', action='store_true',
                  dest='devtarball', default=False,
                  help="This option is ignored for now")

    
if __name__ == '__main__':
    opts, args = parser.parse_args(sys.argv[1:])
    main(opts, args)
    
