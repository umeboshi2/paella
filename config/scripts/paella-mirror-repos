#!/usr/bin/env python
import os, sys
from optparse import OptionParser

from apt_pkg import ParseTagFile

from useless.base import Error
from useless.base.util import makepaths, gunzip, get_url, get_file

from paella.debian.base import make_pkg_item, make_src_item

packages_filename = 'Packages.gz'
sources_filename = 'Sources.gz'



def check_and_get_file(mirror, path):
    if not os.path.isfile(path):
        get_file(os.path.join(mirror, path), path, 'gone')
    else:
        print 'already have', path

def parse_tagfile(mirror, filename, distpath=None):
    if filename == 'Packages.gz':
        ftype = 'pkg'
    elif filename == 'Sources.gz':
        ftype = 'src'
    else:
        raise Error, 'bad filename %s' % filename
    if distpath:
        filename = os.path.join(distpath, filename)
    tagfile = gunzip(filename)
    parser = ParseTagFile(tagfile)
    while parser.Step():
        if ftype == 'src':
            dir, files = make_src_item(parser.Section)[1]
            for afile in files:
                lpath = os.path.join(dir, afile.name)
                check_and_get_file(mirror, lpath)
        else:
            lpath = make_pkg_item(parser.Section)[1][0]
            check_and_get_file(mirror, lpath)



def mirror_repository(mirror, pkg_type, distpath):
    if pkg_type == 'source':
        tagfile = sources_filename
    else:
        tagfile = packages_filename
    if distpath:
        print distpath
        tagfile_path = os.path.join(distpath, tagfile)
    else:
        tagfile_path = tagfile
    if not os.path.isfile(tagfile_path):
        url = os.path.join(mirror, tagfile_path)
        print "%s doesn't exist" % tagfile_path
        print os.getcwd()
        print 'getting', url
        os.system('wget %s' % url)
        os.system('mv %s %s' % (tagfile, tagfile_path))
        print tagfile_path
    parse_tagfile(mirror, tagfile, distpath)
    

parser = OptionParser()
parser.add_option('--mirror', action='store', type='string', dest='mirror',
                  default='http://developer.linuxtag.net/knoppix')
parser.add_option('--type', action='store', type='choice', dest='pkg_type',
                  default='binary', choices=['binary', 'source'])
parser.add_option('--distpath', action='store', type='string', dest='distpath',
                  default='')

opts, args = parser.parse_args(sys.argv[1:])


print 'mirroring', opts.mirror
mirror_repository(opts.mirror, opts.pkg_type, opts.distpath)

