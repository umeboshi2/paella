#!/usr/bin/env python
import os, sys
from os.path import join
from optparse import OptionParser

from paella.base import PaellaConfig
from paella.debian.repos import ReposMirror

config = PaellaConfig('debrepos')

#SUITES=['woody', 'sarge', 'sid']
SUITES = config.get_list('official_suites')
if os.environ.has_key('SUITES'):
    SUITES=os.environ['SUITES'].split()
repos_root = 'file:' + config['repos_root']

parser = OptionParser()

parser.add_option('-l', '--local', action='store', type='string', dest='local',
                  default=repos_root)
parser.add_option('-q', '--quick', action='store_true', dest='quick',
                  default=False)

opts, args = parser.parse_args(sys.argv[1:])

main = config['official_main']
nonus = config['official_nonus']
security = config['official_security']

mirror = ReposMirror()
mirror.set_type('deb')
mirror.set_local_root(repos_root)
mirror.set_remote_uri(main)

for suite in SUITES:
    mirror.set_remote_uri(main)
    mirror.set_suite(suite)
    mirror.set_type('deb')
    arch_section = '%s_archs' % suite
    if config.has_key(arch_section):
        archs = config.get_list(arch_section)
    else:
        archs = config.get_list('default_archs')
    for arch in archs:
        mirror.set_arch(arch)
        mirror.init_repos_handler()
        mirror.run_update(quick=opts.quick)
    mirror.set_type('deb-src')
    mirror.init_repos_handler()
    mirror.run_update(quick=opts.quick)
    if suite in config.get_list('updated_suites'):
        mirror.set_remote_uri(security)
        mirror.set_type('deb')
        mirror.set_suite('%s/updates' % suite)
        for arch in archs:
            mirror.set_arch(arch)
            mirror.init_repos_handler()
            mirror.run_update(quick=opts.quick)
        mirror.set_type('deb-src')
        mirror.init_repos_handler()
        mirror.run_update(quick=opts.quick)
        
command = 'paella-update-repos --local=%s' % opts.local
if opts.quick:
    command += ' -q'
    


main = config['official_main']
nonus = config['official_nonus']
security = config['official_security']

for suite in SUITES:
    os.system(command + ' -t binary --remote=%s %s' % (main, suite))
    os.system(command + ' -t source --remote=%s %s' % (main, suite))
    if suite == 'woody':
        os.system(command + ' -t binary --remote=%s %s' % (nonus, 'woody/non-US'))
        os.system(command + ' -t source --remote=%s %s' % (nonus, 'woody/non-US'))
    if suite in ['woody', 'sarge']:
        os.system(command + ' -t binary --remote=%s %s/updates' %(security, suite))
        os.system(command + ' -t source --remote=%s %s/updates' %(security, suite))
