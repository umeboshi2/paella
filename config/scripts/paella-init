#!/usr/bin/env python
import os, sys
import commands
from os.path import join, basename

print 'paella-init started'
# mount /proc
os.system("mount -t proc proc /proc")

print 'proc mounted'

# parse kernel command line options
_opts = file('/proc/cmdline').read().strip().split() 
kernopts = dict([o.split('=') for o in _opts if o.find('=') >= 0])

# setup python path if available
if 'python_path' in kernopts:
    sys.path.insert(0, kernopts['python_path'])
    os.environ['PYTHONPATH'] = kernopts['python_path']
    
# setup PATH variable
os.environ['PATH'] = ':'.join(['/bin', '/sbin', '/usr/bin', '/usr/sbin'])

# setup DEBIAN_FRONTEND
os.environ['DEBIAN_FRONTEND'] = 'noninteractive'

# are we using a logfile?
logfile = None
if 'logfile' in kernopts.keys():
    logfile = kernopts['logfile']
elif 'LOGFILE' in kernopts.keys():
    logfile = kernopts['LOGFILE']

if logfile is not None:
    os.environ['LOGFILE'] = logfile

# the imports below may depend on python_path being set
from useless.base import Error, debug
from useless.base.config import Configuration
from useless.base.util import makepaths
from useless.db.midlevel import StatementCursor

from paella.base import PaellaConfig
from paella.db.base import get_suite


from paella.uml.base import UmlConfig
from paella.uml.chroot import UmlChroot
from paella.uml.bootstrap import UmlBootstrapper
from paella.uml.installer import UmlInstaller

from paella.installer.base import InstallerConnection
from paella.installer.base import CurrentEnvironment
from paella.installer.profile import install_packages_uml
from paella.installer.profile import get_profile_packages
from paella.installer.profile import ProfileInstaller





action = kernopts['paella_action']

cfg = UmlConfig(files=[kernopts['umlconfig']])

umlmachine = ''
if 'umlmachine' in kernopts:
    umlmachine = kernopts['umlmachine']
    os.environ['PAELLA_MACHINE'] = umlmachine

kver = commands.getoutput('uname -r')

# setup networking
os.system('ifconfig lo up')
if cfg['guest_eth_ifconfig'] == 'dhcp':
    print 'starting up interfaces'
    os.system('ifconfig eth0 up')
    print 'interfaces up'
    print commands.getoutput('ifconfig')
    print 'obtaining address via dhcp'
    os.system('pump -R -i eth0')
    os.system('pump -s -i eth0')
else:
    print 'configuring static network'
    addr = cfg['guest_eth_addr']
    nmask = cfg['guest_eth_netmask']
    ifup = 'ifconfig eth0 %s netmask %s up' % (addr, nmask)
    print ifup
    os.system(ifup)
    addgw = 'route add default gw %s' %cfg['host_tun_addr']
    print addgw
    os.system(addgw)

# start performing paella_action
print 'performing action', action
# setup objects for actions that use database
if action in ['install', 'restore']:
    cfile = cfg['paellarc']
    os.environ['PAELLARC'] = cfile
    pcfg = PaellaConfig(files=[cfile])
    conn = InstallerConnection(pcfg)
    s = StatementCursor(conn)
    curenv = None
    if umlmachine:
        curenv = CurrentEnvironment(conn, umlmachine)
        curenv['current_profile'] = 'None'
        
if action == 'install':
    # not sure I need this
    profile = kernopts['paellaprofile']
    suite = get_suite(conn, profile)
    print 'profile and suite are:', profile, suite
elif action == 'bootstrap':
    suite = kernopts['paellasuite']
elif action == 'restore':
    profile = kernopts['paellaprofile']
elif action == 'extract':
    tarball = kernopts['paella_system_tarball']
    


#print 'KERNOPTS'
#for k,v in kernopts.items():
#    print k,v
backup_filesystem = cfg.get('umlmachines', 'backup_filesystem')
if action == 'install':
    installer = UmlInstaller(conn, cfg=cfg)
    installer.set_mode('guest')
    installer.perform_install(profile=profile, backup_filesystem=backup_filesystem)
    sys.stdout.write('profile installed.\n')
elif action == 'bootstrap':
    print "action is bootstrap"
    target = '/tmp/target'
    bootstrapper = UmlBootstrapper(suite, cfg=cfg)
    bootstrapper.set_mode('guest')
    bootsrap_opts = ['bootstrap_script', 'bootstrap_mirror']
    for bootsrap_opt in bootsrap_opts:
        if bootsrap_opt in kernopts:
            bootstrapper.options[bootsrap_opt] = kernopts[bootsrap_opt]
    bootstrapper.mount_backup('/mnt', backup_filesystem)
    print 'backup_filesystem mounted'
    bootstrapper.set_target(target)
    bootstrapper.bootstrap()
    bootstrapper.backup_target(suite + '.base')
    sys.stdout.write('%s bootstrapped.\n' % suite)
elif action == 'restore':
    restore = UmlInstaller(conn, cfg=cfg)
    restore.setup_target()
    tarball = join(cfg['bkuptarball_path'], '%s.tar' % profile)
    restore.extract_root_tarball(tarball)
    sys.stdout.write('profile %s restored.\n' % profile)
elif action == 'extract':
    extract = UmlChroot(cfg=cfg)
    extract.set_mode('guest')
    extract.mount_backup('/mnt', backup_filesystem)
    extract.setup_target()
    extract.extract_root_tarball(tarball)
    sys.stdout.write('%s extracted.\n' % basename(tarball))
elif action == 'backup':
    cfg.change(kernopts['backup_target'])
    backup = UmlChroot(cfg)
    backup.set_mode('guest')
    backup.mount_tmp()
    backup.set_target()
    backup.mount_target()
    backup.backup_target(cfg['profile'])
    sys.stdout.write('system backed up.\n')
    
    
else:
    print 'DOING', action
    

os.system('/sbin/halt -d -f')
