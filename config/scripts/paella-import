#!/usr/bin/env python

import os, sys
from optparse import OptionParser
from xml.dom.minidom import parse as parse_file

from useless.base.path import path
from paella.db import PaellaConnection
from paella.db.main import PaellaImporter


# setup option parser
parser = OptionParser()
# entity options
# since we can determine the entity by
# parsing the xml file, we only need to
# specify what the entity is on non-xml files
parser.add_option('--diskconfig', action='store_const', const='diskconfig',
                  dest='entity')
parser.add_option('--aptkey', action='store_const', const='aptkey', dest='entity')
# the suite needs to be set to determine where to
# place the trait that's being imported
parser.add_option('--suite', type='string',action='store', dest='suite', default='')

# we don't think that we're going to be using these options
parser.add_option('--directory', type='string', action='store', dest='export_path',
                  default='.')
parser.add_option('--all', action='store_true', dest='all', default=False)


# get options and arguments
opts, args = parser.parse_args(sys.argv[1:])

if len(args) > 1:
    raise RuntimeError , "we can only handle one argument at a time."

if not len(args):
    raise RuntimeError , "we need an argument"


conn = PaellaConnection()
importer = PaellaImporter(conn)

arg = path(args[0])
isdir = False
entity = None
if arg.isfile():
    filename = arg
    #print "we have a file"
    if opts.entity is None:
        parsed = parse_file(arg)
        tagname = parsed.firstChild.tagName
        if tagname == 'family':
            entity = 'family'
        elif tagname == 'profile':
            entity = 'profile'
        elif tagname == 'trait':
            entity = 'trait'
        elif tagname == 'machine':
            entity = 'machine'
        elif tagname == 'paelladatabase':
            entity = 'paelladatabase'
    else:
        entity = opts.entity
elif arg.isdir():
    isdir = True
    # we'll try to figure out what to do with directories later
    raise RuntimeError , 'you need to pass an xml filename as an argument'

#print 'entity is', entity
if entity in ['trait', 'family', 'profile', 'machine']:
    # we're going to get the element, but possible
    # ignore depending on how the db objects do
    # the importing
    element = parsed.firstChild
    if entity == 'family':
        importer.import_family(filename)
    elif entity == 'profile':
        importer.import_profile(filename)
    elif entity == 'trait':
        if not opts.suite:
            raise RuntimeError , "--suite needs to be set when importing a trait"
        suite = opts.suite
        dirname = filename.dirname()
        importer.import_trait(suite, dirname)
    elif entity == 'machine':
        raise RuntimeError , "Importing machines isn't implemented yet"
    else:
        raise RuntimeError , "We don't know what happened"
else:
    if entity == 'aptkey':
        importer.import_aptkey(filename)
        print "Imported aptkey", filename
    elif entity == 'diskconfig':
        importer.import_diskconfig(filename)
        print 'Imported diskconfig', filename
    elif entity == 'paelladatabase':
        dirname = os.path.dirname(filename)
        importer.perform_full_import(dirname)
    else:
        print "we're not ready to import anything else yet"
        print "you requested that %s be imported as %s" % (filename, entity)
    
