#!/usr/bin/env python
import os, sys
from os.path import join
from optparse import OptionParser

from useless.base import Error, debug

from paella.debian.base import RepositorySource
from paella.debian.repos import RemoteRepos

def run_update(remote, local, quick=False):
    rr = RemoteRepos(remote, local)
    rr.update()
    if rr.source.suite in ['sid']:
        rr.release._zip_ = 'gz'
        rr.update_sections()
    rr.check(quick=quick)
    rr.sync()

def update_suite(remote, local, suite, quick=False, src=False):
    remote.suite = suite
    local.suite = suite
    if src:
        local.type = 'deb-src'
        remote.type = 'deb-src'        
    remote.set_path()
    local.set_path()
    run_update(remote, local, quick=quick)
        

parser = OptionParser()
parser.add_option('-r', '--remote', action='store', type='string', dest='remote',
                  default='http://paella/debian')
parser.add_option('-l', '--local', action='store', type='string', dest='local',
                  default='file:/mirrors/debian')
parser.add_option('-t', '--type', action='store', type='choice', dest='type',
                  default='binary', choices=['binary', 'source'])
parser.add_option('-q', '--quick', action='store_true', dest='quick',
                  default=False)

opts, args = parser.parse_args(sys.argv[1:])
src = False
if opts.type == 'source':
    src=True

suite = args[0]

ls = RepositorySource('deb file:/mirrors/debian woody main contrib non-free')
rs = RepositorySource('deb http://paella/debian woody main contrib non-free')

ls = RepositorySource('deb %s %s main contrib non-free' % (opts.local, suite))
rs = RepositorySource('deb %s %s main contrib non-free' % (opts.remote, suite))


print ls
print rs
print 'Mirroring type %s' % opts.type
if opts.quick:
    print 'Doing a quick check'
else:
    print 'Doing a complete check'
update_suite(rs, ls, suite, quick=opts.quick, src=src)
print 'suite %s updated.' % suite
