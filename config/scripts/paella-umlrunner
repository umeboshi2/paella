#!/usr/bin/env python
import os, sys
from os.path import join
from optparse import OptionParser

from useless.base import Error, debug
from paella.uml.umlrunner import backup, install, restore, run, extract

from paella.uml.umlrunner import UmlMachineManager
from paella.uml.base import UmlConfig

parser = OptionParser()
parser.add_option('--basefile', action='store', type='string', dest='basefile',
                  default='')
parser.add_option('--initscript', action='store', type='string', dest='initscript',
                  default='')

parser.usage = '%prog [options] command machine'
parser.usage += '\n\twhere command is either "run" or "install"'
parser.usage += '\n\tand machine is a section from ~/.umlmachines.conf'

opts, args = parser.parse_args(sys.argv[1:])

if len(args) < 2:
    print 'Insufficient Arguments'
    print parser.get_usage()
    sys.exit(1)
    
command = args[0]
machine = args[1]
basefile = opts.basefile
if not basefile:
    basefile = None

umlcfg = UmlConfig()
manager = UmlMachineManager(umlcfg)

manager.run_background = False
manager.set_machine(machine)

runner = None

if command == 'backup':
    raise RuntimeError, 'backup not implemented yet.'
elif command == 'install':
    manager.install_machine(basefile=basefile)
elif command == 'restore':
    raise RuntimeError, 'restore not implemented yet.'
elif command == 'run':
    initscript = opts.initscript
    if not initscript:
        initscript = None
    runner = manager.run_machine(init=initscript)
elif command == 'extract':
    raise RuntimeError, 'extract not implemented yet.'
else:
    print 'bad command %s' % command

    
if runner is not None:
    print "running", machine
    
