{"content": "# [Paella](#)\n\n\n## History\n\nThe old website for this project is at http://paella.berlios.de\n\n**This page needs to be rewritten/reorganized**\n\n### What was it?\n\nPaella was written over eight years ago, yet much of the core components \nhave changed little since the project started approaching stability.  Some \nof the core code was removed into the useless project for use in other \nprojects unrelated to paella.  The latest major change the the code was \nmade in 2009, and I have been using paella to install systems consistently \nsince then.  The code has proven itself to be a reliable framework, where \nthe changes that are necessary to update the manner in which the installer \noperates can be handled through the hooks that the installer objects \nprovide.\n\nThe other edge of this sword is that, in the attempt to design a flexible \nframework that can be directed almost entirely through the configuration, \nthe code that actually executes the framework has remained sessile.  While \nthis provides stability and predictability, it comes at a price.  At this \npoint in time, many of the upstream sources that paella depends upon have \nall been largely abandoned by world developers at large, in favor of sources \nthat are being actively developed and maintained.  This effectively puts the \nfuture of paella in jeopardy if the framework isn't eventually modified \nto take advantages of the state of our shared codebase that have happened \nover the last eight years.\n\nIn the beginning, this code was written at a time where I was pressed to \nhave a system to install the servers that I was responsible for installing \nand configuring to perform the function request by the client.  I needed a \nsystem that could install preconfigured systems in a reliable and predictable \nmanner.  I had become familiar with FAI, and I started using this to meet \nmy needs.  During this time, I felt that using a SQL database to hold \nthe smaller particulars of the installation data would come in handy, due \nto the relational nature of the database.  While inheritance and \nhierarchies can become more involved with a relational database, the format \nis handy for performing many management activities with the configuration \ncan become more difficult when the configuration is stored in a filesystem.\n\nI also wanted to exceed some of the limitations that constrained me when \nusing FAI.  The manner in which FAI operates depends on an nfs mount on \na local network.  Paella, however, only needs access to the configuration \ndatabase.  The live system that contains the installer can be run from \nnfs, cdrom, or usb.  This allows installation on machines that are don't \nhave PXE capability, as well as allowing installation of servers where the \nconfiguration database is not located on the local network.  Furthermore, \nI desired to develop a gui to manipulate the configuration, and the sql \ndatabase lent itself to quicker gui development.\n\n### Features on Older Version\n- Automated network installation over a local network.\n\n- The configuration is split into conceptual entities that are\n  organized in a manner that defines a machine by the functions \n  that it performs, the group of machines it belongs to according to \n  network, role, or any other criteria that you define.\n\n- The boot media is created from debian live, which allows for netboot,\n  cdrom, and usb media types.\n\n- A gui exists to help manage the database.\n\n- The installer system is very flexible, where each step in the \n  configuration is able to be overridden with a script.\n\n- The system is split into independent packages that clearly describe \n  their requirements, attempting to relieve the bloat that can occur \n  when using a single source tree to provide functionality in \n  differing environments (for example, qt4 doesn't need to be present \n  on the installation systems).\n\n- The system can be used to install preconfigured machines that are \n  ready to be deployed to another network, or it can be used to install \n  machines on the local network as a service.  The distinction depends upon \n  the configuration of the database.\n\n- Paella works upon the principle that the value of an entity, such as a \n  hostname, should be stored in one place, then referenced from other places \n  as the need requires, rather than being copied. (http://paella.berlios.de/docs/abstract.html#one-location-for-a-variable)\n\n- The structure of the database allows the administrator to distinguish \n  between logical and physical configurations.  This allows the administrator \n  to more easily upgrade a machine to a new physical configuration.\n\n\n\n## That was then, this is now\n\nPaella is not a new project.  It has been rewritten entirely from scratch.\nYou are looking at what could best be called version 2.  A brief overview\nof version 1, and the inspiration for paella and some of what it did is on\nthe [\"history page\"](#page/history).\n\nConfiguration management never made it past install.  Using paella (v1)\nto keep and maintain a configuration would require some sort of state\nmanagement that was more easily presumed with a fresh install, than\ncould be easily done after deployment.  This required to much time and\nattention in the past when good configuration management systems were\nfew and far between.  My dislike for [PERL](http://perl.com) kept me from\ncontributing to [FAI](https://fai-project.org) as well as using cfengine.\nI briefly looked into using bcfg2, but couldn't quite get it working\nto my satisfaction.\n\nAt sometime, when paella v1 was showing its age,\n[puppet](https://puppetlabs.com) was\nbecoming quite popular.  Puppet became popular enough to seem to inspire\nother configuration management systems.  This lead me to look again for another\nconfiguration management system that was based upon python.  There were a\nfew systems to choose from, but the choice was between\n[ansible](https://ansible.com) and [salt](https://saltstack.com).  I wound\nup using salt, primarily for the use of [zeromq](https://zeromq.org) for\ncommunication.\n\n## Paella and FAI\n\nPaella was originally inspired by [FAI](https://fai-project.org), and in fact,\nthe earliest incarnation was a set of python scripts that communicated with\na [postgresql](https://postgresql.org) database.  Much of the manner in\nwhich paella operated was in many ways similar to FAI, especially the ability to\nhook into and modify each part of the installation process.  The desire to create\na project similar to FAI, rather than contribute, was honestly based upon a\nstrong preference for using [python](https://python.org) instead of\n[perl](https://perl.com) for development.\n\nUnlike, FAI, paella is no longer using the [debian-live](https://live.debian.net/)\nto install the debian systems.  Instead, the\n[debian installer](https://www.debian.org/devel/debian-installer/) is being\nused to [install](#pages/debian-install) the base system\nand prepare it to be configured with salt on the\nnext reboot.  Up until the present rewrite, paella depended upon \n[fai-setup-storage](https://packages.debian.org/unstable/main/fai-setup-storage),\nwhich was thoughtfully split from the other FAI packages, as it proves to be\nvery useful.  There exists a possibility that fai-setup-storage may be included\nalong with febootstrap to automatically install rpm type systems.\n\nAlso, paella uses a [web server](#pages/paella-server) to help with the installation and\nmanagement of the machines.  While the browser application is still in it's\ninfancy and only performs the most minimal of management functions, the\napi it provides allows the debian installs to retrieve preseed files and special\nscripts that are specific to each machine.  The setup is used to inform the\npaella server when debian install is completed on each machine, deconfiguring\nthe specific PXE configuration file that booted the machine and providing for\nfurther configuration with salt upon reboot.\n\n", "id": "history"}