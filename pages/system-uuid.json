{"content": "# [Paella](#)\n\n## System UUID\n\nThe machines on the paella network are identified by their system \nuuid.  In normal network operations, AFAICT, the system uuid is only \ntransferred over the network during the PXE negotiation, in plaintext.  \nWhen using paella, the uuid, is transferred over the network in http \nrequests by the client when identifying itself to the server.  The paella \ndatabase should not provide a uuid to a paella client.\n\nEven though paella is really meant to be used on a local network where \nthe administrator has enough physical access and monitoring ability to \nprovide trust during a network install, it would be valuable to raise \nthe bar of an attacker to the point of having to discover or guess a \nsystem uuid.  Due to the nature of PXE, attempts to write code that \nwould block an attacker that sniffs the network would be pointless.  \nThe design is mostly to keep a user of one machine to be able to \nretrieve the pillar data or minion keys of another machine.\n\n\n## Rules Concerning System UUID\n\nThese are the rules that are intended to be implemented in the paella \nsystem.  These are the rules for the unauthenticated access that the \ninstaller requires to operate.  \n\nThe command line tools to submit machines and set them to install \ncurrently operate in an unauthenticated manner, but this will \nchange to require authentication as paella is further developed.\n\n\n### Major Guidelines\n\nThe uuid is the primary identifier for a machine.  The uuid is the \nmain token for unauthenticated access.\n\nMachine information cannot be retrieved from a query by the \nname of the machine, nor any other identifier other than the \nuuid of that machine.\n\nThe only uuid ever retrieved from the server should match the uuid \nsent in requests by the client.  Normally this will be the machine \nthat is being used.  In no circumstance must there be a uuid for \nanother machine revealed.  There must be no way to retrieve a map of \nmachine names and uuids.\n\n\n### Submit Machine\n\nSubmit machine will submit uuid and name.  UUID is gathered from system \nautomatically; name must be entered as command line argument.  This will \nbe a POST request. (/paella/api0/machines)\n\nIf either the name or the uuid is present in the database, the POST \nrequest will fail.\n\n\n### Set Install\n\nThe set install script is requesting the machine by uuid using a GET \nrequest.\n\nIf the uuid is present in the database, the server will create the\npxe config files.  The preseed file will need to be retrieved using \nthe uuid, rather than the name.  This needs to be true for the late \ncommand script as well.\n\n### Retrieve machine data\n\nThe GET request for a machine's data needs a url with the uuid \nincluded.  A machine's data cannot be retrieved by the name of \nthe machine.\n\n\n### Preseed and late command files\n\nPreseed files on the server are referred to by uuid.  The url for \nthe late command script is also retrieved by uuid.\n\n### Salt Minion\n\nThe salt minion id will be the name of the machine, which will be \nunique.  It seems to be too cumbersome to use the uuid as the minion \nid when maintaining configurations.  The actual \"minion\", or system,\nshould not be identified by a hardware uuid, yet merely attached to a\nsingle system-uuid that can change when the hardware dies and needs\nreplacement.\n\n\n\n## Network Discovery of UUIDs\n\nUsing system uuids as identifiers provides a small obstacle to \nhaving everything that is needed to configure a certain machine \navailable to another machine on the network.  It's not intended \nto be a security measure, as it stands, but help a more concerned \nadministrator to be able to constrain things more by enabling \nauthentication on the paella web server, and using ssl where \npossible.  It may be possible to use http://user:pass@ip/preseed/uuid \n\n\n\n\n\n\n", "id": "system-uuid"}