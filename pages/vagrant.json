{"content": "# [Paella](#)\n\n## Vagrant\n\n### Introduction\n\nVagrant is used to establish a testing environment for paella.  The \nVagrantfile creates a virtualbox machine with two network interfaces.  The \nsecond network is a virtualbox internal network where the installation system \nis hosted.  The installation system can be tested by creating virtual \nmachines and booting from the internal network to define and install the \nsystem.\n\nThe vagrant virtual machine configuration is quite involved.  The VM will\nbe serving the files necessary to automatically install debian systems based\non either wheezy or jessie, and on either an i386 or amd64 architecture.  This\nmeans that there are quite a few files to be downloaded and prepared before\nthe vagrant environment is operational.\n\nAlso, the paella server needs to download two windows 7 iso files, one for each\narchitecture, as well as the Windows Automated Installation Kit iso, for\nretrieving the boot.wim file.  Moreover, there are quite a few windows applications\nthat are also downloaded for use with paella.  Some of these are build and\nruntime dependencies for the salt-minion, which will be used later to\nautomatically build the salt-minion windows package.\n\nAll in all, the vagrant machine will need to download approximately\n15 gigabytes, more or less, of data from the internet.\n**FIXME Check size of local repo.**\n\n### Set up the Environment\n\nFirst you will need to have [Virtual Box](http://virtualbox.org) installed \non your system.  Then make sure to download and\ninstall [Vagrant](http://www.vagrantup.com/downloads.html) on your system.  I \nused version 1.5.1 when creating the system.  As of this writing, the \ncurrent version in debian jessie will work, as well as later versions \n1.x.x.  Once vagrant is installed, you will need two plugins.  If you are using\nthe vagrant found in debian jessie, you can skip the plugin installation.\n\n\n```sh\nvagrant plugin install vagrant-vbguest\nvagrant plugin install vagrant-salt\n```\n\nThen in the project directory:\n\n```sh\nvagrant up\n```\n\nDepending upon the speed of your network connection, the configuring \nof the virtual machine can take a while.  The small partial debian \nrepository necessary for a simple environment, along with the \nsecurity and salt repositories, is currently just over 2000 megabytes \nin size. **FIXME Check size of local repo.**\n\nThere could be various problems that are reported by the salt provisioner, \ndepending on the availability of network resources.  Most of the problems \nshould be resolvable by executing:\n\n```sh\nvagrant provision\n```\n\nrepeatedly until salt reports no errors.  If there were problems when \ninitially updating the debian repositories, you may have to update them \nlater.  The salt states that manage reprepro could use some work.  The \nbuilding of the live system will depend on the repositories being updated \nand ready.  Otherwise, the state system will get almost everything else \nready.\n\nOnce the salt provisioner reports no errors, you will have to reboot the \nvirtual machine by typing:\n\n```sh\nvagrant reload --provision\n```\n\nWhen the machine boots again, the system should be ready.\n\n### Install a Machine\n\n#### Create a New Virtual Machine\n\nIn the Virtual Box Manager application, create a new machine.  Make \nsure it is set at Operating System: Linux, and Version: Debian.  Otherwise, \nthe default settings in the wizard should be satisfactory.  You need to \nedit the settings of the machine and set the Network Adapter 1 to be attached \nto the Internal Network named \"intloc.\"  If the vagrant machine is already \nprovisioned, this network should already be selectable.\n\nYou may want to click on the System tab and enable Network in the Boot \nOrder, and move it to the top.  If not, you will have to press F12 after \npowering the machine to boot from the network.\n\n#### Boot the Machine\n\nStart the virtual machine and make sure it boots from the network.  If \nyou are presented with a \"First Run Wizard\", you can press cancel as it \nwill attempt to guide you into installing via a cdrom.  You should see a \nscreen of paella and a ten second timer before the machine attempts to \nboot from the hard drive.  Press down and select \"Standard Live System\", \nand then the first entry on the next screen.  This will boot the live\nsystem and allow you to identify the machine and set it to be installed.\n\n#### Using paella client\n\nWhen the live system boots up, you can type:\n\n```sh\npaella-submit-machine <name>\n```\n\nwhere &lt;name&gt; is the name you wish to give the machine to identify it \nby.  This will send an http post request to the server with the name \nand the system uuid of the machine.  The system uuid will be used to \ncreate a special pxe config file that will be presented to the machine \nwhen it is set to be installed.  \n\nAfter this, type:\n\n```sh\npaella-set-install\n```\n\nThis will use the system-uuid to look up the machine in the database and \ntell the server to create the special pxe config file for the machine.  \nOnce this command successfully completes, you can reboot the machine.\n\n### Start the Install\n\nBoot the machine from the network again, and you will see the install \nmenu, with the install option as the first entry.  There is no timeout, \nso you must press enter for the machine to boot.  The machine will then \nboot into an automated debian install, then reboot back into a system \nthat immediately engages in configuring itself using salt.\n\n\n## What Vagrant Does\n\nPaella starts by installing some basic packages that are either necessary\nor useful.  Development packages and tools are necessary for preparing\npaella to perform network intalls.\n\n\n\n\nShorewall\n--------------\n\nThis is the firewall for paella.  In the vagrant development environment, this state\ncould very easily be replaced by a short iptables script that performs the NAT.\nHowever, shorewall is a really good application and the state helps serve to\nprepare other machines that will be using shorewall.\n\nDHCP Server\n-------------------\n\nOne of the most difficult things to configure is the dhcp server.  In order to\nsupport the various possibilities of pxe clients, as well as serve a bootloader that\nis capable of retrieving images via http, the dhcpd configuration can become\nquite involved, especially when chainloading different bootfiles based upon client\ncapabilities.  I am attempting a generic configuration that will hopefully serve the\nproper boot files regardless of pxe client, but it may be required for the system\nadministrator to reconfigure dhcpd to match their machines more closely.\n\nSamba\n----------\n\nSamba needs to be prepared in order to be able to install Microsoft Windows systems.\n\nThe samba state, or configuration in salt for vagrant, can take quite a while to\nexecute.  The state is responsible for making sure that the files that will be served\nthrough samba exist on the system, or otherwise retrieve them from the internet.  The\nbulk of what is retrieved are two windows 7 iso files from the Digital River site, as well\nas the Windows Automatic Installation Kit iso available from Microsoft.  These iso files\ncan take extensive time to download.  There are also other files and small utilities\nthat are good to install on a windows system that are included.  The files that\nare necessary to build the salt-minion on windows, as well at the build dependencies\nare also installed here.\n\nAfter the iso files are downloaded, they are mounted loopback and served\nthrough samba.\n\nPostgreSQL\n---------------------\n\nThis is the database that paella uses.\n\nDebrepos\n----------------\n\nThis state prepares the local partial debian and security repository, the partial\nsalt repository and a paella repository for locally built packages.  This is the\nlocal debian mirror that everything is installed from.  The desire is to have\npaella capable of fully automated installs on a network that is disconnected\nfrom the internet.  This goal is not being chased vigorously, but the foundation\nof the goal needs to be prepared.\n\n\nVirtualenv\n-------------------\n\nThis state prepares the different python virtual environments that are used with\npaella.\n\n\nSaltMaster\n-----------------\n\nThis state is responsible for installing the salt master.  Each machine that is\ninstalled with paella will have salt-minion installed and the salt master will\nconfigure those machines.\n\n\nMain Server\n-------------------\n\nThis state depends on apache, virtualenv, and postgresql.  This state\nprepares the paella pyramid web server application and the paella database.\nThis state also depends on the webdev state that is responsible for building\nthe static resources for the web browser.\n\nWimLib\n-----------\n\nWimlib is used to manage WIM images.  Wimlib is necessary to extract the\nboot.wim from the AIK iso and create the WinPE iso used in paella.  The \nschroot and pbuilder packages are installed and configure to build wimlib\npackages for i386 arch. The wimlib packages are uploaded to local paella debrepos.\n\nPaella Client\n------------------\n\nPaella client is a very simple command line tool to talk to the paella server.  Currently\nit is the main manner to submit a new machine to the paella database.  There is\nalso a command to set the machine to be installed, but not a command to unset a\nmachine. \n\nWinPE\n---------\n\nThis state builds the WinPE iso files that will be used to instal windows\nsystems.  The example i386 iso file that is made will perform an automated\ninstall.  An unattended file needs to be made for amd64 for the other iso\nto do the same.\n\nThere is also an iso file created that executes bcdboot to install the bootloader\non windows installs.  This file is needed when using the wimlib tools to install\na WIM image to a hard drive.  After the image is installed, a virtualbox instance\nis loaded that boots the iso and installs the bootloader on the hard drive.\n\nDebian Live\n-------------------\n\nDebian live systems are used with paella to assist with installs, management,\nand other unforeseen tasks.  The live system has the command line tools to\nsubmit a machine to the paella server.   It also has wimlib ready to install wim\nimages to the hard drive.  All the files and configuration to build the live systems\nare installed with this set of states.\n\nDriver Packs\n-------------------\n\nWhen installing windows systems, drivers are necessary.  There are driver\npacks available on the internet, and this state is written to retrieve and prepare\nthe driver packs for use with windows installs.  This is a work in progress and\nunfinished.  Downloading the driver packs requires using bittorrent.  I have\nwritten a python script that performs the job, however with some service\nproviders apparently blocking bittorrent traffic, an alternative retrieval method\nshould be explored.  It's possible that preparing this part of paella may have to\nbe left as an exercise for the end user, with insructions given, rather than a\ncompletely automated setup as desired.\n\n\nNetboot\n-------------\n\nMuch of the preparation described above is put together in the netboot\nstate.  This state prepares the debian installer in the tftpboot directory,\nas well as building the debian live systems and installing those.  These\nstates also prepare tftpd-hpa and the other files in the tftpboot directory\nthat are served by tftpd.  A live system is built for each architecture.  This\nstate can take a while to complete.  This state also helps to make sure that\nthe tftpd service and nfsd service are configured and running properly.\n\n\nWinbuilder\n----------------\n\nThis state will eventually be used to build the salt-minion for windows in\nan automated manner.  There is an open github issue for this topic and\nI desire to have this done at some point in my spare time.\n\n\nBy the time that the masterless salt provisioning in vagrant makes it to\nthe winbuilder state, the paella server should be fully prepared to start\nexecuting network installs.\n\n## Using Vagrant to bootstrap your network\n\nWhile the vagrant development environment is a good tool to configure\nand test paella, on normal virtualbox setups, it only installs to virtual machines.\n\nThe vagrant machine can be used to install bare metal machines.  All that\nis necessary is a secondary network interface on the host machine that\npaella resides upon.  The Vagrantfile (FIXME) has a commented section\nthat will help configure the virtual machine to be bridged across the\nsecondary network interface on the host.  The host machine should be\nconfigured statically.  If the paella server ip on it's local network is\n10.0.4.1, the host machine should be set statically to 10.0.4.2, or\nanother appropriate ip that will not conflict with the dynamic addresses\nthe dhcp server provides to network clients.\n\n\n", "id": "vagrant"}