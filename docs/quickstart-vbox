.. -*- mode: rst -*-

===========================
Paella Quick Start Guide
===========================

This guide is unfinished.  If you are reading this, do not expect the guide to be correct or
accurate.  This guide has been a work in progress, and has been changing with respect to 
things that have been changing in paella, and its dependencies.  This guide should not be 
considered to be complete, until this paragraph is removed.  However, much of this guide, 
and the scripts and configuration that surround it, are almost complete.  This means that 
this guide can be considered as "beta" instead of "alpha".  While there may be parts of this 
guide that are incorrect, I believe that most of this guide can be followed without any 
unexpected surprises.  This guide should not be considered as 100% complete until this 
paragraph is removed.  This will probably happen soon after lenny is released.

.. contents:: :backlinks: entry

Introduction
===============================

.. introductory comment


Paella depends on a particular type of setup to operate.  This document details how to 
bootstrap that setup, starting from the bare minimum requirements.  This guide is written 
with the goal of minimizing the requirement for the root account to setup the system.  The 
former method of working with paella, required (possibly) extensive configuring of a local 
network.  In order to effectively use paella in a "production" environment, where you are 
actually installing machines, still requires the same type of network configuration.  It is hoped 
that the method outlined here can help prepare this by using paella to generate the 
configuration that paella requires.



Requirements
==========================

Debian
----------

You should be running debian to follow this quickstart procedure.  It's technically not 
required, but this document will assume that your running either lenny, sid, or etch 
with VirtualBox running (from backports.org or similar).  This procedure has been tested 
while running sid, although lenny should work just fine.  There also shouldn't really be 
any problem with using etch, save for having to have VirtualBox installed.

Hardware
-----------------
This quickstart routine was developed and tested using a laptop with 3GB of memory.
You could probably get by with less which I will try to estimate later.  Most of the memory 
is required to run the virtual machines.  I estimate that only 2GB of ram will be required.  
Please note that this is only the hardware requirements for following this quickstart 
procedure, and doesn't reflect the actual requirements to run paella in a regular 
environment with a network of machines.

You will need to run an operating system that can host VirtualBox OSE.

VirtualBox OSE
-----------------------

This quickstart will use VirtualBox OSE to setup the machine that will act as the main 
paella server, and also to make machines to test those installs.  The procedure outlined 
below is assuming that you are using a GNU/Linux system as a host for VirtualBox OSE, but 
there shouldn't be anything stopping somebody from using VirtualBox  on another host OS.

Networking
------------------

This quickstart has been written to use 10.0.1.0 for the internal network that the virtual 
machines will be using.  The main virtual machine (paella.lapnet) will be using the 10.0.1.1 
ip, while the other virtual machines will be obtaining their ip's from the dhcp server running 
on paella.lapnet.  It is desirable to keep these defaults if at all possible.  If these ip numbers 
conflict with your setup, I have tried to make it as easy as possible to use another block of
ip's.  If you can't use the 10.0.1.0 network, I recommend that you still use some block inside 
the 10.0.x.0 network.  I have tested the quickstart while changing the network to 10.0.x.0, and 
it appears to work without problems.


Debian Netinst CD Image (Lenny)
-------------------------------------

.. _page: http://www.debian.org/devel/debian-installer/


The stable (lenny) release is what is currently supported.  You should get the netinst iso, 
which available on this page_.  I used the i386_ image.  Hopefully any architecture should work, 
but at the moment, only i386 is tested.  When I'm satisfied that the i386 is working properly, I'll 
be testing the amd64 architecture.  Feedback on any other architectures would be appreciated.  
If you are using a virtualbox version less than 2, you will have to use the i386 image, as the guest 
machines will only run i386 code.  The virtualbox-ose package that ships with debian lenny is 
version 1.6.6, which will require using i386 guests.  There are newer virtualbox-ose packages 
available at http://backports.org that will run amd64 code on the guests, if you wish to use 
those.  This quickstart should work with any version from 1.6.6 and above.



.. _i386: http://cdimage.debian.org/debian-cd/current/i386/iso-cd/debian-500-i386-netinst.iso

Remaster the netinst iso
-------------------------------------------

This step is highly recommended.  This step is technically optional, but it may be handy, 
especially if you have an application that can remaster an iso image.  This allows you to 
preseed the debian installer and make an automated install.  Even though this step is 
technically optional, it would be a very good idea to get the script below, and the files that 
are obtained through subversion in the script to get an idea of how to proceed manually 
without performing this step.

If you are running debian, remastering the iso is easy::

   mkdir remaster-netinst
   cd remaster-netinst
   svn export svn://svn.berlios.de/paella/trunk/config/scripts/remaster-netinst-iso
   
if you already grabbed the netinst iso image, type::

   ./remaster-netinst-iso /path/to/debian-500-i386-netinst.iso

if you haven't gotten the netinst iso image yet, type::

   ./remaster-netinst-iso

The script will attempt to download the netinst iso for lenny, but it may be out of date 
when by the time you read this, so you are recommended to download the iso_ manually.

.. _iso: http://cdimage.debian.org/debian-cd

**WARNING!!!**  This script uses sudo to perform the loopback mounting of the iso 
image.  Be sure to look over the script really good before you execute it.  You may want to 
change the ARCH variable near the top of the file (note: only i386 is tested at the moment).  
Be sure that you have rsync, sudo, genisoimage, and subversion installed.

The script will give you a chance to review and edit the preseed files before you create the 
remastered iso image.  All the files that will be used in the remastered iso image will be 
located in the cd/ directory. If you have a local mirror that you want to install from, you should 
edit the localmirror.cfg file in the cd/ directory.  When the script is finished, the iso image will be 
./paella-netinst.iso .

**Note**  The preseed configuration files, and the setup scripts assume that the locale 
is set to en_US.UTF-8 .  If you are using another locale, you really need to modify both the 
preseed.cfg file, and the setup-paella-server script.  The postgresql database server will not 
run unless your locale is generated, and referenced in the postgresql.conf file.



Setup the paella virtual machine
===============================================

You need to get the virtualbox frontend up and running.  The user interface varies between 
different versions of virtualbox.  These instructions were written using version 1.6.6, which 
is the default version in debian lenny.  To start the virtualbox gui type::

   virtualbox

Make a new machine using the wizard provided by the virtualbox frontend.  Press next 
and name the machine "paella".  Select "Debian" for the OS type.  Press next.  Set the base 
memory size to 256MB.  Press next.  Make a new disk image at the default 8GB size (I chose 
dynamically expanding size).  Press finish.

Select paella from the list of machines on the frontend, and click the settings button.  In the 
configuration dialog, select CD/DVD-ROM on the left hand side.  Click on the Mount CD/DVD 
Drive button at the top.  Select the ISO Image File.  Press the folder on the right to bring up 
the Virtual Disk Manager.  Here you want to add the netinst iso that you remastered.  It should 
be called paella-netinst-$arch.iso, where $arch is the architecture that either you are running, 
or that you selected.  Close the Virtual Disk Manager, and make sure that the iso is selected as 
the image file that will be mounted.

Now, select the Network part of the list of the left hand side of the settings dialog.  By default, 
the network adapter should be enabled, and set to NAT.  This is what we want.  We also want 
to add another network interface to this machine, so select the Adapter 2 tab.  Click the 
"Enable Network Adapter" button.  Make sure the "Attached to" selection is set to "Internal 
Network".  You will need to name the network in the field that says "Network Name".  Any name 
should do just fine.  I used "lapnet" (no quotes), since I'm on a laptop.  Remember this name, 
since you'll need this for the other machine(s) that you will use paella to install to.

If you are using an newer 64 bit processor that has hardware virtualization support, you may want 
to enable this in the general preferences, as the virtual machine will run much faster.

.. Boot the paella virtual machine
.. ================================

Install the paella virtual machine
----------------------------------------

Now you should be ready to boot the virtual machine, and install debian lenny.

Boot the machine by pressing Start (the green arrow) on the virtualbox frontend (make sure 
the paella virtual machine is the one that's selected).  When the boot screen appears, select 
one of the first two menu options.  Don't bother selecting the second option unless you have 
a local debian mirror, and you have modified the preseed files.

If you remastered the netinst iso, the install will proceed automatically.  The setup scripts 
will be copied to /usr/local/bin by the debian installer.

.. _netinst: http://paella.berlios.de/netinst/

If you didn't remaster the netinst file, you can find the preseed files, and the setup scripts 
in the netinst_ directory on the paella website.  You can just install debian in the normal 
manner.  You'll need to select the standard, desktop, and database-server tasks.  Look at 
the preseed file to see how the default setup is configured.  The hostname, main user, and 
the main user's password are all set to "paella" to make it easy to remember.  The paella 
user should be added to the src, staff, adm, and sudo groups, but this probably isn't 
an absolute necessity.  Set the dhcp3-server to listen to eth1 on the debconf question.

The rest of the instructions will assume that you installed from a remastered iso.

First boot on the paella virtual machine
--------------------------------------------------

After the debian installer is finished, the virtual machine should reboot .  You should take 
this time to disassociate the iso image from the machine in the VirtualBox frontend, else 
the iso will boot everytime you boot the virtual machine.  You may also want to save a 
snapshot of the virtual machine, in case you have problems with the initial setup script.

When the system boots up for the first time, you will want to want to login to the console.  
You can reach the console by pressing the "Host" key and F1 (By default, the "Host" key 
is the right <ctrl> key).  You will want to login here, instead of to the X session, because 
the script will reconfigure X and restart the display manager.

Once you switch to the local console, you will need to login as paella (password paella).  
Here you will run a script that will help configure the server and get it ready for the rest 
of this procedure.  The script is located at /usr/local/bin/setup-paella-server .  You may 
need to edit the script and set the ip addresses that are set near the top.  The default 
internal network that is used is 10.0.1.0/24.  You may need to change this if the ip 
values conflict with your local network setup.  I suggest you try to stick to these values 
if it's possible, and if it's not possible, to use 10.0.2.0/24, or something similar.  

Please note that the script will try to install the guest utils and build the guest modules.  
If you are not running virtualbox-ose version 1.6.6, you may need to may want to set 
"do_backports" to "yes" in the script.  If the version of virtualbox-ose that you are using 
doesn't match the version that's available at backports.org, the guest additions are 
unlikely to work.  The guest additions are not absolutely necessary.  They just help 
keep the mouse from feeling jerky, and also help configure the size of the screen to 
more comfortable resolutions.  The attempt to build and install the guest additions 
happens at the very end of the script, so if you have problems with this and using the 
backports repository doesn't help, you will have to do without the guest modules.  If 
you can't use the guest modules, you may need to use a modified xorg.conf to adjust 
the resolution of the screen on the guest machine.  Regardless of whether the guest 
additions are installed or not, the script will create an example xorg.conf located at 
/etc/X11/xorg.conf.unused .  You may copy this to /etc/X11/xorg.conf and modify it 
as you need.  If you do this, you must use a resolution that the vesa driver supports.


When  you are ready you should type::

     sudo setup-paella-server


This should set up everything that couldn't be done on the debian installer.  This script 
will setup the cofiguration of the database, firewall, dhcp server, and the network interface 
for the internal network.  Also, the virtualbox guest modules will be installed, and the 
xorg.conf configuration will be modified to make use of them.  The script will need to 
download about 11 megabytes worth of packages to build the guest modules with 
module-assistant.  When the script is finished, you should see a graphical login screen.  
You may want to return to the console that you are logged into to logout before logging 
into the X session.

Once you have logged into the X session, you may want to load this page on a web 
browser in the virtual machine and continue this guide.  This will make it easier to 
cut and paste the commands that are given here.  The rest of the guide will assume that 
you have done this.


Create a Partial Debian Archive
=========================================


Make a gpg key
------------------------

You'll need a gpg key to sign the Release files of the local debian repository.  This is important, 
since debian has spent a great deal of time making it possible to verify the authenticity of the 
packages being installed on your system.  Full instructions on how to generate a key and use it 
properly are beyond the scope of this docuement.  You can find more detailed 
at http://www.gnupg.org/ .

I have written a script that will help create a key to sign the archives with.  This key will be 
created without a passphrase and should only be used with this quickstart guide.

To run the script, type::

	generate-gpg-key

If you need more random bytes, try moving the mouse around a lot, and pecking the keyboard 
randomly in a text editor.  To get the disk moving, type this in another terminal window::

     find /usr/share | xargs sha1sum


Setup initial debian mirror
-------------------------------------------

I have written a script to help setup the partial debian repository that will be used in this
guide.  **Note:**  If you used a local mirror with the netinst iso, the script may fail during 
the final part.

To run the script, type::

      initialize-local-debian-repository

The script will call apt-move to install the packages located in /var/cache/apt/archives 
into the local repository.  It will then setup reprepro and fill the repository with the rest 
of the packages that will be needed to finish this guide.  It will use the gpg key that you 
created above to sign the repository, add that key to apt, add the local repository to 
/etc/apt/sources.list, and run apt-get update.

Take a break.  Grab some coffee.  This will take a bit, depending on your internet 
connection.  I've taken care to only include the packages that needed, plus a few 
extra packages that I use as tools to help me test this quickstart routine.  As of the time 
this was written, the pool directory was 465MB in size.

**Note:**  If the script failed, and you installed from a local mirror, you will need to 
edit the /freespace/debian/conf/updates file and adjust the VerifyRelease fields in 
the update stanzas.  You may have to import a key using gpg --import, or you may 
just remove the VerifyRelease fields from the stanzas.  Once you are sure the 
stanzas are correct, you can type::

	reprepro -b /freespace/debian -VV --noskipold update
	sudo apt-get update

This will finish preparing the initial debian repository, and use that repository 
in your apt sources.


Obtain paella from subversion
------------------------------------

Now you're ready to get the source code from subversion.  To do this, type ::

    	     cd
	     paella-user-quick-setup

This will setup the directories, and download the source code from the berlios subversion 
repository.  It will also install build dependencies, plus some extra packages required to 
create the netboot image that will be made later in this guide.  It will then build the packages
and install them into your freshly made debian repository.  


Debian Live
============

Why Debian Live?
----------------------------------------
Now you're ready to make the live nfsroot installer.  In the past, I had done this with paella, 
and I had a flaky configuration that worked, albeit just barely.  In the beginning, I had to 
compile a special kernel to allow me to mount an nfsroot, and have the network drivers 
compiled right into the kernel image.  Later, the work on the initrd filesystem allowed me to 
use stock kernels to boot from an nfsroot, but the readonly live nfsroot was flaky and limited 
at best.  These days, there's DebianLive_ to help do much of the dirty work here.  It's even 
possible to use DebianLive to make a live iso with the paella installer on it, for machines 
that won't boot off of the network.  I actually had to do this with the older livecd package in 
the past, but DebianLive is much better.  Now I can leave the management of a good live 
system in somebody else's hands, and just concentrate on using that live system as an 
installer for paella.

I have written a script that will help build the live netboot image for the installer.  To run 
the script , type::

    create-debian-live-image


This script will copy the live-helper config files to /freespace/live/config and build the 
image, then install the image and the tftpboot files to the appropriate locations.

**Important**  If you aren't able to use 10.0.1.1 as the ip address of your eth1 interface 
on the virtual machine, you will have to edit /freespace/live/config/binary and set 
LH_NET_ROOT_SERVER to the value of the ip that you will be using and then build the image
again.

Here are some quick instructions on how to do that::

     cd /freespace/live
     sudo lh_clean
     sudo lh_build
     sudo ./config/prepare-netboot


Using Paella Management Interface
=======================================================

Install the Admin Package
---------------------------------

Now we're almost ready to use the management interface.  To install it, type::

    sudo apt-get update
    sudo apt-get install paella-admin

The executable is called **paella-management**.  You can either type it into a 
terminal, or find it in the debian menu (but not in the kde menu, yet).  Don't run it yet, you 
should set up the configuration file first.


Setup ~/.paellarc
-------------------

.. __: http://docs.python.org/lib/module-ConfigParser.html

The master config file will be found at /etc/paellarc .  The master config file is the one that 
the installer will use.  You can copy this file to ~/.paellarc and edit it.  The paella-management 
program will read the master config file, then the local one at ~/.paellarc .  The local file will 
override options in the master file.  If you are not familiar with the file format, you can read 
about it here__ .  Options that are prefixed by an underscore are not referenced in the code.  
You can make your own underscored options, if you wish, to make it easier to edit.

Type::

	cd
	cp /etc/paellarc .paellarc



In the database section, the dbhost option should be the ip address of the eth1 interface, 
which should be 10.0.1.1 .  You will also need to change the dbusername option to the database 
admin user (dbadmin).  The dbusername in the master config file should  always be "paella".

The management_gui section has options for the paella-management application.  The options 
that you may want to change here are "text_editor", and "x_differ".  Both of these commands 
should display an X window.  For the x_differ, I highly recommend xxdiff.  I have a config file that 
makes it easier to use xxdiff, located at /usr/share/doc/paella-admin/xxdiffrc .  You'll want to 
copy this file to ~/.xxdiffrc .  The x_differ command line in the paellarc file conforms 
to this::

     x_differ LeftFile RightFile

If your differ needs options on the command line, please write a wrapper for it, and use that.

There are only two text editors that I included with this quickstart routine.  They are 
kate (the default) and xemacs.  If you wish to use another one, go ahead and install it and 
put the command in the ~/.paellarc file.

You should not need to change any other options.

The paellarc configuration file is used by two distinct users, the database admin, and the 
paella installer.  Much of the configuration in the paellarc file is used for the database admin.  
The paella installer user only needs the database section of the paellarc file, as this user 
uses the paella database for the rest of his configuration.


Start paella-management
------------------------------
Run the paella-management script to start the management interface::

    paella-management
 
The little window that pops up is the main menu for paella.  From here on, I'll refer it as 
the "main paella window".  There are two menu systems on the "main paella window".  One 
of them is the standard menu bar at the top.  The other one is the list right below the menu 
bar.  This is the list that contains "differs, environ, familes, ...".  This is the part of the 
interface that has so far defied any conformance to standards that you might be used to.  
I'm going to be calling this part of the interface the "list menu".

 
The first thing that you will want to do is to connect to the database.  There is a connect button 
on the toolbar for you to press.  The connection dialog entries are taken from your ~/.paellarc 
file.  The settings for postgresql in this quickstart don't require a password for dbadmin, but 
you'll want to use one if you use paella in a production environment.

Once you connect to the database, you should get a dialog asking to create the primary 
tables.  You should click yes here to setup an empty database structure.  If you don't do 
this, the database import procedure will create these tables for you, but you won't be able to
use the paella-management interface until you do this.


Import the database
--------------------------
Now we are going to import the startup database.  You may need an internet connection to 
import the database.  The importer downloads the Packages files from the debian mirror in 
the database.xml file, and inserts them into the database.  Go to the menubar, and in the 
database menu, select "import database".  A directory selection dialog will appear.  On the 
VM I tested, this window was a little bit too skinny, so you'll probably need to make it wider 
with your mouse.  The database directory will be at::

	 ~/workspace/paella/config/share/databases/quickstart-vbox/

Note that the default debian mirror is  http://ftp.us.debian.org/debian .  If you need to 
change this, edit the database.xml file in the quickstart-vbox  directory, and alter the uri 
attribute to the aptsource xml element at the top of the file.  You can change this to a local 
mirror if you already have one.  I recommend against using the local mirror that you just 
created in this quickstart routine, as you would likely want to make new traits with packages 
that aren't available in that mirror.  Paella has only been tested with http apt sources, it's 
behaviour on other methods is unknown.


If everything is working, you should be seeing an ugly little progress dialog displaying 
something resembling what it should be doing.  I need to fix this dialog to make it more 
accurate, but at least you'll see it working while it inserts the information into the 
database.  The packages will probably take a little while to insert.  The apt_source_packages 
table can take a lot of space that could be better saved.  In the future, it will probably default 
to only holding package names rather than the other attributes in the Packages file.  The 
reason they are there is to help keep the automated installations from bombing due to 
unavailable or misspelled packages.  It would also be nice to have a little package browser 
to help when creating traits, but that's in the future, and it would need the full record of each 
package to be stored in the database.

Guide to Paella Management
-------------------------------------------------

A more complete guide to using paella-management can be found here__.

.. __: gui-guide.html


Configure quickstart-vbox database
======================================================

Add the archive key
-------------------------------------

Now you'll need to add the gpg key you made above to paella, so that paella can install 
the packages from the new mirror.  Type::

    paella-import --aptkey /freespace/debian/paella.gpg

Now check that the key has been imported.  There is a small apt key manager in the gui 
for this.  This is a rather new part of the gui, so the interface is far from complete.  At 
the moment you can only add keys, not remove them.  The apt key manager can be reached 
from the "main paella window" Main menu on the menu bar.  You should see the name 
and key id of the paella key on the list.  The name is taken from the filename when you 
imported the key.


Edit the Default Environment
--------------------------------------------

Access to the default environment is provided on the "list menu" in the "main paella 
window", under the "environ" item in the list.  Click on the "+" to the left of the "environ" 
list item, and two list items will be displayed below the environ item, named "current" and 
"default".  You will want to click on "default".  This will bring up the "Default Environment" 
manager.  To edit the default environment, press the "edit" button in the toolbar.  This will 
bring up a text editor (if you're using kate, you'll have to select the session first).  The file 
format is the same as the paellarc config file.  

There are only two options that you will probably want to change.  The "archive_keys" 
option is a comma separated list of key names that will be used for the installer.  The key, 
"paella", should already be here.  If you named your key something else, or have other keys 
that you want to use, you need to list them here.  The other option is "http_mirror", and you 
will want to either set this to "http://paella.lapnet/debian" .  You must save the file and 
exit the text editor for paella to save the information to the database.



Create A Machine to Install
===================================

We're done with the paella VM for a little bit.  Now it's time to create a new VM which will be 
used to install a system.  You don't want to poweroff or reboot the paella VM, since we'll be 
using again shortly.

Side Salad to a Paella
----------------------------------
Creating the next machine will be almost just like creating the paella VM.  This new machine 
should be named "sidesalad", as that's what I'm going to be calling for the remainder of this 
quickstart document.  Follow the instructions for making the paella VM, except keep the 
memory at its default setting (or you can probably go down to 128M without problems if you're 
starved for memory).  Make sure that you create the 8GB virtual hard drive, else we won't have 
a device on which to install.  

Now with "sidesalad" selected in the VirtualBox frontend, press the Settings button on the 
toolbar.  On this machine, you'll need to configure the network interface to use the internal 
network, just as you configured the secondary network adapter on the paella VM.  Be sure to 
use the name "lapnet" for the network name.  Also, in the General settings, click the Advanced 
tab.  You need to check the box to the left of Network in the "Boot Order" window, and move 
Network all the way to the top.  This will let it boot from the network first.  These should be the 
only configuration changes you'll need to make.

Boot the new machine
----------------------------------
Now we're ready to boot the machine.  The machine should boot straight from the network 
without any problems.  If this doesn't happen, it's a sign that something went wrong.  If I have 
time later, I might write a short troubleshooting section to help figure out what went wrong.  If 
you haven't strayed from the defaults, and have been following this document closely, the 
machine should boot.  I've done everything I can think of to make this process as easy as 
possible, so that when you get to this step, you'll have a VM booting from the internal network, 
but it's possible that I forgot something somewhere.  If you are absolutely sure that you have 
followed this quickstart step by step and haven't got the new machine to boot from the network, 
I'd really like to know about it, so we can figure out what went wrong, and how to adjust this 
document to be prepared for that possibility.

Tell Paella about the new machine
----------------------------------------------------------
If sidesalad booted from the network correctly, at the end of the boot process, there should 
be a message explaining that this is an unknown machine, and to use paella-submit-machine 
to tell paella about it.  This is what we're going to do now.  Type::

   paella-submit-machine sidesalad

This will insert the mac addresses of all the ethernet interfaces into the database, tied to the 
name "sidesalad".  These addresses are inserted into the default_environment table.  The 
paella database user only has INSERT and SELECT access to the default_environment table.  
If there are matching addresses already present in the table, the inserts will not take place.  
This could mean that the addresses have already been matched to another machine (this 
shouldn't happen in this quickstart, but it's something that the admin needs to be aware of).  
The only table that the paella database user has full write access to is the current_environment 
table.  All other tables are read-only to the paella database user.

There's nothing else to be done with the sidesalad machine at this moment, so go ahead and 
shut it down::

     sudo poweroff


Manage the database again
-----------------------------------------------------

Now we need to go back to the paella VM.  Edit the default environment, and set the 
sidesalad option to 'True' in the autoinstall section.  This will tell the paella-init-nfsinstaller 
script to install the machine, once it boots.  The admin should be aware about this part of 
the default environment, since when the autoinstall value is set to 'True', the machine will 
install each time it's booted from the network.  

Create the Sidesalad Machine
-------------------------------------------

Now we are ready to create the sidesalad machine in the database.

**If you've made it this far, and the "unfinished" disclaimer is still at the top of this document, feel free to play around with paella anyway, and see if you can figure out how to use it.**







toc_

.. _toc: index.html

-------------------------------------------------

.. _useless:  http://useless.berlios.de/


.. _mounts: #mount
.. _families: #family
.. _profiles: #profile
.. _filesystems: #filesystem
.. _machine_type: #machine-type
.. _machine_types: #machine-type
.. _traits: #trait
.. _machines: #machine
.. _DebianLive: http://wiki.debian.org/DebianLive
