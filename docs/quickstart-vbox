.. -*- mode: rst -*-

Paella Quick Start Guide
===========================
This guide is unfinished.  If you are reading this, do not expect the guide to be correct or
accurate.  This guide will not be ready to read, and the steps outlined should not be 
attempted until this paragraph is removed.

.. contents:: :backlinks: entry

Introduction
--------------------

.. introductory comment


Paella depends on a particular type of setup to operate.  This document details how to 
bootstrap that setup, starting from the bare minimum requirements.  This guide is written 
with the goal of minimizing the requirement for the root account to setup the system.  The 
former method of working with paella, required (possibly) extensive configuring of a local 
network.  In order to effectively use paella in a "production" environment, where you are 
actually installing machines, still requires the same type of network configuration.  It is hoped 
that the method outlined here can help prepare this by using paella to generate the 
configuration that paella requires.


-------------------

Requirements
==========================

Debian
----------

You should be running debian to follow this quickstart procedure.  It's technically not 
required, but this document will assume that your running either lenny, sid, or etch 
with VirtualBox running (from backports.org or similar).  This procedure has been tested 
while running sid, although lenny should work just fine.  There also shouldn't really be 
any problem with using etch, save for having to have VirtualBox installed.

Hardware
-----------------
This quickstart routine was developed and tested using a laptop with 3GB of memory.
You could probably get by with less which I will try to estimate later.  Most of the memory 
is required to run the virtual machines.  I estimate that only 2GB of ram will be required.  
Please note that this is only the hardware requirements for following this quickstart 
procedure, and doesn't reflect the actual requirements to run paella in a regular 
environment with a network of machines.

You will need to run an operating system that can host VirtualBox OSE.

VirtualBox OSE
-----------------------

This quickstart will use VirtualBox OSE to setup the machine that will act as the main 
paella server, and also to test to make machines to test the installs.  The procedure outlined 
below is assuming that you are using a GNU/Linux system as a host for VirtualBox OSE, but 
there shouldn't be anything stopping somebody from using VirtualBox  on another host OS.


Debian Netinst CD Image (LennyBeta2)
-------------------------------------

.. _page: http://www.debian.org/devel/debian-installer/

.. _url: ftp://ftp.nl.debian.org/debian/dists/testing/main/installer-i386/current/images/

The upcoming lenny release is what is currently supported.  You should get the netinst iso, 
which available on this page_.  I used the i386_ image.  Hopefully any architecture should work, 
but at the moment, only i386 is tested.  When I'm satisfied that the i386 is working properly, I'll 
be testing the amd64 architecture.  Feedback on any other architectures would be appreciated.


.. _i386: http://cdimage.debian.org/cdimage/lenny_di_beta2/i386/iso-cd/debian-LennyBeta2-i386-netinst.iso


Remaster the netinst iso
-------------------------------------------

This step is highly recommended.  This step is technically optional, but it may be handy, 
especially if you have an application that can remaster an iso image.  This allows you to 
preseed the debian installer and make an automated install.  Even though this step is 
technically optional, it would be a very good idea to get the script below, and the files that 
are obtained through subversion in the script to get an idea of how to proceed manually 
without performing this step.  

If you are running debian, remastering the iso is easy::

   svn export svn://svn.berlios.de/paella/trunk/config/scripts/remaster-netinst-iso
   
if you already grabbed the netinst iso image, type::

   ./remaster-netinst-iso /path/to/debian-LennyBeta2-i386-netinst.iso

if you haven't gotten the netinst iso image yet, type::

   ./remaster-netinst-iso

**WARNING!!!**  This script uses sudo to perform the loopback mounting of the iso 
image.  Be sure to look over the script really good before you execute it.  You may want to 
change the ARCH variable near the top of the file.  Be sure that you have rsync, sudo, and 
subversion installed.

Either download the iso, and enter the filename as the first argument, or just run the script 
without arguments.  The script will download the debian-LennyBeta2-i386-netinst.iso for you.

The script will give you a chance to review and edit the preseed files before you create the 
remastered iso image.  When the script is finished, the iso image will be ./paella-netinst.iso .

**Note**  The preseed configuration files, and the setup scripts assume that the locale 
is set to en_US.UTF-8 .  If you are using another locale, you really need to modify both the 
preseed.cfg file, and the setup-paella-server script.  The postgresql database server will not 
run unless your locale is generated, and referenced in the postgresql.conf file.



Setup the paella virtual machine
===============================================

You need to get the virtualbox frontend up and running.

Make a new machine using the wizard provided by the virtualbox frontend.  Press next 
and name the machine "paella".  Select "Debian" for the OS type.  Press next.  Set the base 
memory size to 512MB.  Press next.  Make a new disk image at the default 8GB size (I chose 
dynamically expanding size).  Press finish.

Select paella from the list of machines on the frontend, and click the settings button.  In the 
configuration dialog, select CD/DVD-ROM on the left hand side.  Click on the Mount CD/DVD 
Drive button at the top.  Select the ISO Image File.  Press the folder on the right to bring up 
the Virtual Disk Manager.  Here you want to add the netinst iso that you downloaded.  Close 
the Virtual Disk Manager, and make sure that the iso is selected as the image file that will 
be mounted.

Now, select the Network part of the list of the left hand side of the settings dialog.  By default, 
the network adapter should be enabled, and set to NAT.  This is what we want.  We also want 
to add another network interface to this machine, so select the Adapter 1 tab.  Click the 
"Enable Network Adapter" button.  Make sure the "Attached to" selection is set to "Internal 
Network".  You will need to name the network in the field that says "Network Name".  Any name 
should do just fine.  I used "lapnet" (no quotes), since I'm on a laptop.  Remember this name, 
since you'll need this for the other machine(s) that you will use paella to install to.

Boot the paella virtual machine
================================

Install the paella virtual machine
----------------------------------------

Now you should be ready to boot the virtual machine, and install debian lenny.

Boot the machine by pressing Start (the green arrow) on the virtualbox frontend (make sure 
the paella virtual machine is the one that's selected).  When the boot screen appears, select 
one of the first two menu options.  Don't bother selecting the second option unless you have 
a local debian mirror, and you have modified the preseed files.

If you remastered the netinst iso, the install will proceed automatically.  The setup scripts 
will be copied to /usr/local/bin by the debian installer.

.. _netinst: http://paella.berlios.de/netinst/

If you didn't remaster the netinst file, you can find the preseed files, and the setup scripts 
in the netinst_ directory on the paella website.  You can just install debian in the normal 
manner.  You'll need to select the standard, desktop, and database-server tasks.  Look at 
the preseed file to see how the default setup is configured.  The hostname, main user, and 
the main user's password are all set to "paella" to make it easy to remember.  The paella 
user should be added to the src, staff, adm, and sudo groups, but this probably isn't 
an absolute necessity.  Set the dhcp3-server to listen to eth1 on the debconf question.

The rest of the instructions will assume that you installed from a remastered iso.

First boot on the paella virtual machine
--------------------------------------------------

After the debian installer is finished, the virtual machine should reboot .  You should take 
this time to disassociate the iso image from the machine in the VirtualBox frontend, else 
the iso will boot everytime you boot the virtual machine.

When the sytem boots up for the first time, login as paella (password paella).  You may 
want to load this webpage in a web browser in the virtual machine, so you can more easily 
cut and paste from this page.  We need to start configuring the server. Start a terminal 
and type::

     sudo setup-paella-server


This should set up everything that couldn't be done on the debian installer.  This script 
will setup the cofiguration of the database, firewall, dhcp server, and the network interface 
for the internal network.

While I've tried to make things work by restarting services, things don't always work right.  
You may need to reboot the virtual machine after this script, if you notice errors in restarting 
the servers at the end of the execution of the script.  If you do encounter the errors, and don't 
feel like rebooting, restart these services::

     sudo /etc/init.d/networking restart
     sudo /etc/init.d/postgresql-8.3 restart
     sudo /etc/init.d/shorewall restart
     sudo /etc/init.d/apache2 restart




In the xorg.conf file, the screen resolution is set to 1024x768.  This is because the default 
screen size for VESA is 1280x1024, which is too big for my laptop.  Feel free to edit this file, 
or restore the original at /etc/X11/xorg.conf.orig .  You may also want to use the virtualbox 
guest drivers, but the input drivers (mouse and keyboard) stopped working when I tried 
them.  The vesa driver is known to work, even though it's probably not nearly as efficient.

Now you're ready to setup the development environment, and get the source code from 
subversion.  to do this, type ::
	     
	     
	     
	     cd
	     paella-devel-quick-setup

This will setup the directories, and download the source code from the berlios subversion 
repository.  You'll need to either source the paella_environment file, add the lines of that file 
to your .bashrc, or source the file from your .bashrc .  Since you're using a virtual machine, it
would probably be best to add it to your .bashrc ::

      cat paella_environment >> .bashrc

If you didn't remaster the iso, you can cut and paste the apt-get command from the output of 
the script.  The list of packages is likely not accurate, and you really need to read the preseed 
files for a reference.


Make a gpg key
------------------------

You'll need a gpg key to sign the Release files of the local debian repository.  This is important, 
since debian has spent a great deal of time making it possible to verify the authenticity of the 
packages being installed on your system.  Full instructions on how to generate a key and use it 
properly are beyond the scope of this docuement.  You can find more detailed 
at http://www.gnupg.org/ .

If you just want to get up and running, you can follow these quick and **potentially insecure** instructions.
Type::

	echo $USER@`cat /etc/mailname`

This will be the default email address used to search for the key that signs the packages 
you build.  We will also use this key to sign the Release file in the locally generated mirror.

Now type::

	getent passwd | grep $USER | cut -f5 -d: | cut -f1 -d,

This will be the "Real Name" that you will use for the key.  Either remember the email and "Real 
Name", or use another terminal to generate the key.

Now type::

	gpg --gen-key

Answer the questions in the dialog.  It should be ok to answer the defaults, until you get to
the question asking "Is this correct?".  After this, you'll need to enter the "Real Name" and 
email address that you obtained from the steps above.  You can enter an empty passphrase, 
but remember that you can't use this key for anything more serious than working with paella 
in a testing environment.  If you do want a passphrase, you'll also need to know how to use 
gpg-agent, which is also beyond the scope of this document.

You'll need to know the key ID of the gpg key for the steps below. Here, I'm assuming 
that the "Real Name" you entered above is "Paella User".  To obtain it, type::

	    gpg --fingerprint "Paella User" | grep ^pub | cut -f2 -d/ | cut -f1 -d' '

You should get an eight digit hexadecimal number, which you'll need to remember.  From
here on, I'll just refer to it as your gpg key ID.  If you need more random bytes, type this 
in another window::

     find /usr/share | xargs sha1sum

In an earlier version of this document, I referred to the key ID as the fingerprint, which is 
inaccurate.  The code for paella may still refer to the key ID as a fingerprint, and might not 
be corrected by the time you read this.  Please keep this in mind as you use paella.  I hope to 
have the code corrected after I'm sure that this quickstart routine is fully functional.


Setup initial debian mirror
-------------------------------------------

If you already have a local debian mirror, you can probably skip this step.

type::

	sudo apt-move update
	sudo rm /freespace/debian/.apt-move -fr
	sudo chown -R paella:staff /freespace/debian/*

This will move all the packages installed on the virtual machine to /freespace/debian .  This will 
be the last that apt-move will be used, since we just needed it to move the installed packages 
and setup the initial repository structure.

Now type::

	mkdir /freespace/debian/conf
	dpkg --get-selections > /freespace/debian/conf/paella-packages

This will be the configuration directory for reprepro.  We will be using reprepro to generate
and maintain the local debian mirror for here on.

Create the config files for reprepro
--------------------------------------------------------------

In the instructions below, you don't have to create these files.  You can copy them from the 
remaster netinst cdrom that you made. To do this, type::

	 mount /media/cdrom
	 cp /media/cdrom/paella/reprepro/* /freespace/debian/conf


Now type::

	editor /freespace/debian/conf/distributions

In the editor you want to type something similar to this::

       Origin: Debian
       Label: Debian
       Suite: testing
       Version: 4.0
       Codename: lenny
       Architectures: i386
       Components: main contrib non-free
       Description: Debian x.y Testing - Not Yet Released
       Log: logfile
       Update: lenny security-testing
       SignWith: <your gpg key ID>

       Origin: Paella
       Label: Paella
       Suite: paella
       Version: 4.0
       Codename: paella
       Architectures: i386 source
       Components: main contrib non-free
       Description: Paella local repository
       Log: logfile
       SignWith: <your gpg key ID>



Now we want to use the editor again::

	   editor /freespace/debian/conf/updates

In the editor you want to type  something similar to this::

   Name: lenny
   Method: http://ftp.us.debian.org/debian
   Fallback: http://ftp.de.debian.org/debian
   VerifyRelease: 6070D3A1
   Architectures: i386
   Components: main contrib non-free 
   UDebComponents: none
   FilterList: deinstall paella-startup-packages paella-extra-packages paella-packages

   Name: security-testing
   Method: http://security.debian.org/debian-security
   VerifyRelease: 6070D3A1
   Suite: testing/updates
   Architectures: i386
   Components: main contrib non-free 
   UDebComponents: none
   FilterList: deinstall paella-startup-packages paella-extra-packages paella-packages


In order to verify the release files, you'll need to import the debian archive signing key::

   gpg --recv-keys 6070D3A1

Now would also be a good time to export the public key you made above::

    gpg --export -a > /freespace/debian/paella.key

Let apt on paella know about it too::

    sudo apt-key add /freespace/debian/paella.key

To make sure apt got the key::

   sudo apt-key list

Make sure the key is on the list


Now we're ready to use reprepro to manage the repository::

    reprepro -b /freespace/debian/  -VV update
    reprepro -b /freespace/debian/  -VV export

The -VV options sets the verbosity of reprepro to 10, which will help determine if anything 
goes wrong, and where it does go wrong.

Since reprepro doesn't make verbatim mirrors, when you update from security.debian.org, 
the updated packages are added to the main package list for the suite, instead of 
<suite>/updates .  This is generally a good thing, since when you use a local mirror generated 
by reprepro, you only need one apt source line.  Paella, however was developed before 
reprepro existed, and used to mirror the complete debian archive.  Until paella is fixed to work 
better with this, the workaround is to trick paella into thinking it's looking at <suite>/updates .
To do this, type::

   pushd /freespace/debian/dists/lenny
   ln -s . updates
   popd


Hopefully things went well.




Build paella packages from source tree
--------------------------------------------------------------------

Now it's time to build the useless and paella packages.  First we're going to start with the 
useless package.  Pay attention to the lines below, as you won't be able to just cut-n-paste 
these lines::

	cd ~/workspace/useless
	dch -n  # This will create an NMU (Non-maintainer upload)
	# save the file in the text editor
	debuild
	reprepro -b /freespace/debian --ignore=wrongdistribution include paella ../useless_<version>_i386.changes


Repeat this process for paella::

	cd ~/workspace/paella
	dch -n  # This will create an NMU (Non-maintainer upload)
	# save the file in the text editor
	debuild
	reprepro -b /freespace/debian --ignore=wrongdistribution include paella ../paella_<version>_i386.changes

Let's test our new mirror.  Add these lines to /etc/apt/sources.list ::

      deb http://paella/debian lenny main contrib non-free
      deb http://paella/debian paella main contrib non-free
      deb-src http://paella/debian paella main contrib non-free

And now type::

    sudo apt-get update

Hopefully you won't get any errors.  If you get hash mismatch errors, when running apt-get
update, try this::

	rm /freespace/debian/dists/* -fr
	reprepro -b /freespace/debian -VV export

Don't forget to make the updates symlink mentioned above if you need to erase and 
re-export the packages lists.


Using Paella Management Interface
=======================================================

Install the Admin Package
---------------------------------

Now we're almost ready to use the management interface.  To install it, type::

    apt-get install paella-admin

The executable is called **paella-management**.  You can either type it into a 
terminal, or find it in the debian menu (but not in the kde menu, yet).  Don't run it yet, you 
should set up the configuration file first.


Setup ~/.paellarc
-------------------

.. __: http://docs.python.org/lib/module-ConfigParser.html

The master config file will be found at /etc/paellarc .  The master config file is the one that 
the installer will use.  You can copy this file to ~/.paellarc and edit it.  The paella-management 
program will read the master config file, then the local one at ~/.paellarc .  The local file will 
override options in the master file.  If you are not familiar with the file format, you can read 
about it here__ .  Options that are prefixed by an underscore are not referenced in the code.  
You can make your own underscored options, if you wish, to make it easier to edit.

In the database section, the dbhost option should be the ip address of the eth1 interface, 
which should be 10.0.1.1 .  You will also probably need to change the dbusername option to
the database admin user (dbadmin).  The dbusername in the master config file should 
always be "paella".

The management_gui section has options for the paella-management application.  The options 
that you may want to change here are "text_editor", and "x_differ".  Both of these commands 
should display an X window.  For the x_differ, I highly recommend xxdiff.  The x_differ command 
line conform to this::

     x_differ LeftFile RightFile

If your differ needs options on the command line, please write a wrapper for it, and use that.

You should not need to change any other options.


Start paella-management
------------------------------
Run the paella-management script to start the management interface.  The first thing that you 
will want to do is to connect to the database.  There is a connect button on the toolbar for you 
to press.  The connection dialog entries are taken from your ~/.paellarc file.  The settings 
for postgresql in this quickstart don't require a password for dbadmin, but you'll want to use 
one if you use paella in a production environment.

Once you connect to the database, you should get a dialog asking to create the primary 
tables.  You should click yes here to setup an empty database structure.  If you don't do 
this, the database import procedure will create these tables for you, but you won't be able to
use the paella-management interface until you do this.


The information below is outdated.  To be continued ....


Import the database
--------------------------
Now we are going to import the startup database.  You will need an internet connection to 
import the database.  The importer downloads the Packages files from the debian mirror in 
the database.xml file, and inserts them into the database.  Go to the menubar, and in the 
database menu, select "import database".  A directory selection dialog will appear.  You 
need to select the "stage1" directory.  Note that the default debian mirror is 
http://ftp.us.debian.org/debian .  If you need to change this, edit the database.xml file
in the stage1 directory, and alter the uri attribute to the aptsource xml element at the 
top of the file.  You can change this to a local mirror if you already have one.  Paella has only 
been tested with http apt sources, it's behaviour on other methods is unknown.



      If you are working from a subversion copy from the quick setup script, the directory
      you will want to select is here, ~/workspace/paella/config/share/databases/stage1/ .

If everything is working, you should be seeing an ugly little progress dialog displaying 
something resembling what it should be doing.  The packages will probably take a little 
while to insert.  The apt_source_packages table can take a lot of space that could be
better saved.  In the future, it will probably default to only holding package names rather 
than the other attributes in the Packages file.  The reason they are there is to help keep the 
automated installations from bombing due to unavailable or misspelled packages.


After importing the database, you will have to disconnect and then reconnect to the 
database to refresh the available widgets in the paella-management application.  You may  
wish to restart the application instead, as when an import occurs, a lot of memory is used 
to parse the Packages file, and insert the packages into the database.  This memory is not 
freed after the import process.  Fixing this has not been a major goal, as imports are fairly 
rare during the normal use of paella-management.


Configure stage1 database
-------------------------------------------
There should be very little effort needed to configure the stage1 database.
Check default environment.
Check tap_network family.
Check uml_startup family.

------------------

Install the UML Machines
======================================
Now we should be ready to install the uml machines.  The uml installer is currently limited to 
installing one machine at a time.  This is due to the default configuration for this quickstart 
guide using a static ip.  This can be easily changed later if you wish to use the uml installer 
for testing purposes.

Install uml_head
-------------------------
type::

	paella-umlrunner install uml_head

Install umlbuilder
------------------------
type::

	paella-umlrunner install umlbuilder



Running the UML Machines
======================================
Now we should be ready to start running the uml machines.

Run uml_head
-------------------------
Make sure your umask is set to 022.

type::

	paella-umlrunner run uml_head

Login as root.  There should be no password required.
type::

	./setup_debrepos

This will run a script that will setup a partial debian mirror.  This is to keep from 
having to use a full debian mirror, that used to be required previously to use paella.  This 
partial mirror should be under 400MB in size.


Run umlbuilder
------------------------
type::

	paella-umlrunner run umlbuilder

Login as root.  There should be no password required.
type::

	./init_pbuilder

This will run a script that will prepare pbuilder to build the paella and useless packages.  
Basically it either generates or restores the base.tgz for pbuilder.  The base.tgz is copied to 
the hostfs mount, in case it is needed in the future.  Once the script finishes, the next step 
is to get the useless and paella packages built.  There is a script that does this too.
type::

	./build_paella_from_subversion

This script will checkout the sources from subversion.  It then exports the working copies and 
uses pbuilder to build the exports.  Once the packages are built, they are uploaded to 
the uml_head machine, and placed in the debian mirror.



.. _useless:  http://useless.berlios.de/


.. _mounts: #mount
.. _families: #family
.. _profiles: #profile
.. _filesystems: #filesystem
.. _machine_type: #machine-type
.. _machine_types: #machine-type
.. _traits: #trait
.. _machines: #machine
