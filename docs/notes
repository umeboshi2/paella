Paella Notes
===========================

What is Paella
--------------------

.. small overview of paella

Paella is a installation/configuration management system centered on 
being able to easily define, configure, maintain and update systems and 
networks.

-------------------

Objects and Definitions
--------------------------------

Suite
-------
A suite is a similiar to debian suites like woody or sarge.  A suite 
can be used to make different versions of configurations, or different
styles of design and configurations.  Traits are held in suites.


Trait 
------
A trait is the atomic unit that signifies a feature. 
A trait belongs to a suite.  The table in the database that holds the list of traits
is called $(suite)_traits.  A trait can have packages, parents, templates, scripts 
and a set of variables.

- **parents**

  + no trait can be processed during the installation before all
    of its parents are processed.	     
  + parents are not required, but most traits should depend on a default
    trait.
  + no trait can be processed during the installation before all of its
    parents are processed. 
    
  
- **packages**

  + this is a list of packages to install or remove 
    - although other options are available, only install and remove are supported now 
  + packages are not required 
 
- **templates** 

  + templates can have simple tags for variable substitution 
  + templates store user/group and chmod permissions 
  + a template must currently be attached to a package 
    
    - this feature should be removed, because traits that only need 
      traits get vestigial packages assigned to them like base-files, 
      initscripts, or bash 
  + currently the var/cache/debconf/config.dat template is reserved 
    for debconf 

- **environment** 

  + a collection of name, value pairs for use in the templates and scripts 
  + a trait's environment contains its parents' environment 
  + a big python dictionary is made of the environment where the keys
      are formed as "trait_name" where trait is the trait and name is the 
      name of the variable.

- **scripts** 

  + a trait is not required to have a script 
  + only three types of scripts are currently supported, pre, post, and chroot 

    - chroot is a special script that is run in a chrooted environment in the target area. 
      This script should be aware of what's on the target system and only depend on 
      those things. The script shouldn't connect to paella or depend on other installation 
      tools not present in the target system. 
    - pre is executed before anything else is processed in the trait. 

      + The pre script is executed with an os.system. 

    - post is the very last action to perform in the trait 

      + post should be able to talk to database and environment 

  + other scripts
    
    - you can define a script for any
      step in the trait install process.

    - if you make a script named install, remove, config,
      or reconfig, that step in the trait process is ignored,
      and the script run instead.  The script doesn't have
      to do anything, so it's a good way to skip a step in the 
      trait installation

    - in order for a script to be executed its name must match
      a step in the trait processes.

Family
--------

- A family is a collection of variables from different traits 

  + a family can have parents
  + a family is not tied to a suite
  + a variable in a family doesn't have to exist in a trait,
    but it has to be tied to a trait.

Profile
-------

- A profile is a collection of traits, and an environment

  + Traits - the traits listed in the profile are ordered 
  + Families - an unordered list of families 
  + Environment
	- the profile environment overrides the trait environments 
	  and the family environment 


Machine Database
=================
This section describes the machine database part of paella.  Profile, traits, and families
should not be machine specific.  The Machine database trying to be design to hold
information about physical systems to install logical systems from.

Machine Type
-------------
A machine type is going to be the main identifier of a particular type of machine.
This currently includes disks and kernel modules.  The disks of a machine type are a
list of tuples in the database (machine_type, diskname, device) .  The current policy is 
to treat all devices of a certain  diskname as a raid1 array if there is more than one
device.

Machine Type Scripts
-------------------------------

Machine type scripts are steps in the install process for machines.  These steps
will be treated similiar to the trait scripts. The default steps/scripts are:

- pre

  + this step normally does nothing.

- setup_disks

  + this step is responsible for partitioning the disks and
    for creating the filesystems

- mount_target

  + this step is responsible for mounting the filesystems
    created in the previous step to the target directory

  + the script will need to make the subdirectories in target
    for filesystems under the target root, and mount the
    appropriate ones.

- bootstrap

  + this step is responsible for bootstrapping the base
    system into the target directory.

- apt_sources_installer

  + this step should create a sources.list file that is appropriate
    for the installer environment.  It should place the file in 
    $target/etc/apt/sources.list

- ready_base

  + this is a legacy step in the installer that would setup a root
    password, a simple /etc/network/interfaces file, and a fstab.

- pre_install

  + this step normally does nothing.

- install

  + this step performs the install process

- post_install

  + this step normally does nothing.

- install_modules

  + this step should create a $target/etc/modules file appropriate for
    the machine type.

- install_kernel

  + this step is reponsible for installing a kernel in the target and
    preparing the bootloader for booting.

  +  the machine should be ready to reboot after this step

- apt_sources_final

  + this step is reponsible for making a sources.list that will
    be used when the machine is on the target site.  This step can be
    skipped for on-site installations.

- install_fstab

  + this step is reponsible for installing the fstab on the target system.

- post

  + this step normally does nothing.

Machine
--------

a machine contains 

- a **name**

- a **machine_type**

  + this is one of the machine types that are already defined

- a **kernel** 
  
  + a kernel is simply the name of a kernel image package 
  + the package must be install-able by apt, in a chroot environment, on the target system. 

- a **filesystem** 
  
  + a filesystem_ is a named ordered map of mounts_ to partition numbers 

- a **profile**


Mount
------

a mount_ is named 

a mount describes filesystem type, mount option, dump, pass and the mount point 

Filesystem
---------------

this is done on filesystem_mounts 

the target fstab will be completely formed from the filesystem information 


Installer
----------

The installers in paella are layered.  There is a `trait installer`_, a `profile installer`_,
and a `nfs installer`_.  The installers are layered to make the whole installing
operation more structured.  The trait installer is the simplest and contains everything 
needed for installing a trait.  The profile installer contains a trait installer, and it is 
responsible for installing profiles.  The nfs installer contains a profile installer and is used
to install a profile on a machine.  There is also a chroot installer that will install a profile
to a target directory.

Trait Installer
-------------------

The trait installer is responsible for installing a trait_ to a target location.
It is pretty dumb as it doesn't check to see if a parent has been installed or not.
This class should only be instantiated as a member of the `profile installer`_ class,
or a similiar class because the profiledata and familydata members start out empty.

- default trait install processes (in order)

  + **pre** 

    - special script step

    - if it exists, run the script before anything else

  + **remove**

    - remove packages marked remove in trait's package list

  + **install**

    - install packages marked install in trait's package list

  + **templates**

    - install the templates for the trait

  + **config**

    - currently doesn't do anything, can be used for a script

  + **chroot** 

    - special script step

    - if it exists, run the script chrooted in the target

  + **reconfig**

    - runs dpkg-reconfigure -plow on packages marked
      reconfig in the trait's package list.

  + **post**
    
    - special script step

    - if it exists, run the script after everything else

- the default trait processes can be overridden

  + put a comma separated list of processes in the default_environment
    under the section, **installer**, and the option **trait_processes**.

Profile Installer
---------------------

The profile installer can be instantiated by itself.  It contains a trait installer.
It is responsible for installing a profile to a target location.  A profile is the minimum
install-able object, you can't install a trait alone, but you can have a profile with one trait
in it.  The profile installer is responsible for making the complete list of traits that will be
installed.  The list is composed of the traits listed in the profile itself, and all of their implied
parents, ordered for install.  The profile installer then calls its trait installer for each trait
in the list.


Nfs Installer
-----------------

The nfs installer is responsible for installing a machine to a target location.  This is the
installer that will be run on a machine to be installed.  This installer contains a profile
installer.  The nfs installer will do all of the hardware related functions that are necessary
to setup a target location for its profile installer.  The nfs installer will also setup the fstab,
apt sources, and kernel for the machine.


Installer Toolkit
---------------------

The installer toolkit is made to be used in the trait scripts.  It can't be
used for the chroot script, unless you have paella configured on the
target system.  It is the job of the installer toolkit to provide you with a
good set of tools contained within the toolkit object, so that your scripts
contain a minimum of boilerplate type code.


Automatic Install
-----------------------

Automatic installation is supported.  The setup if fairly simple.  There
is no gui wrapper around parts of it yet, so to really use it, you will
have to use python interactively, or psql.  There is a script on the nfs 
installer called paella-submit-machine.  You pass it a machine name 
argument

Database Schema
----------------------------

The database schema is not very complicated.

The primary tables are:

+ textfiles

  - a table containing an id, md5sum, size, and
    text of every template and script used in the
    database.

+ scriptnames

  - a list of names for the scripts

  - right now this defaults to the steps of the trait
    processes.

+ suites

+ default_environment

+ current_environment

Other tables are in related sets:

+ **suite tables**  -- there is a set for each suite in suites table

  - sarge_packages

    + a list of all the packages available to this suite

  - sarge_traits

    + a list of all the traits_ in this suite

  - sarge_trait_package

    + relates traits to packages

    + action on the package can be remove, install, config, reconfig

      - remove will remove the package, if installed

      - install will install the package

      - config does nothing right now

      - reconfig runs dpkg-reconfigure -plow on the package

  - sarge_trait_parent

    + relates traits to other traits

    + current code can't handle cyclic dependencies

  - sarge_scripts

    + relates traits and scriptnames and textfiles

  - sarge_templates

    + relates traits to packages and textfiles

    + this is where the templates are located

    + info can be preserved for user/group ownership
      and file mode.

    + template tags have the form::


       <--|trait_name|-->
       
     where trait is the name of the trait
     and name is the name of the variable
     for example::

        <--|xwindow_driver|-->


    + parent directories created before installing the
      template will be root:root and system umask
      
  - sarge_variables
    
    + relates traits to name, value pairs

    + a dictionary is made from this table and is used
      in the templates and in the scripts

    + the keys in the dictionary are in the form
      as the template tags mentioned above, without
      the tag markers.

+ **profile tables**

  - profiles_

  - profile_family

  - profile_trait

  - profile_variables

+ **family tables**

  - families_

  - family_environment

  - family_parent

+ **machine tables**

  - machines 

    + list of machines_

    + relates to machine_types, profiles, filesystems, kernels

  - machine_types

    + list of machine_types_

  - machine_disks

    + relates machine_types to disks and device name

  - machine_modules

    + ordered lists of modules

    + relates to machine_types_

  - disks

    + list of disknames

  - filesystem_mounts

    + an ordered list of mounts for a filesystem

    + relates to filesystems_

    + size corresponds to fai diskconfig

    + partition number for hard drive

  - filesystems

    + a list of filesystems_

  - kernels
    
    + a list of kernel package names

  - mounts

    + a list of mounts_ and options 

  - partitions

    + a list of partition numbers and sfdisk info

    + relates to disks 

    + use this info to dump with sfdisk


-----------------------------------

Getting started with paella
--------------------------------------

People who will get the most benefit out of paella are IT consultants that manage
multiple disjoint networks.  You may also benefit from it if your network is large enough,
and you have mostly debian machines on it.  If you only maintain one network with a few
machines, e.g. a firewall, a server, and a couple of desktops, the time involved it setting up
paella and maintaining configurations might probably be more than just using more simple
backup and restore methods.

There are currently no real releases of paella, because i dislike the file release system at
berlios, so you will have to check out the code via subversion, or alternately you can grab
the debian packages from http://gregscomputerservice.com.  The line for the sources.list
is 'deb http://gregscomputerservice.com/debian/local common/'.

A person who uses paella is expected to understand how to perform basic system 
administration on a debian system.  They should also be comfortable with building their
own debian packages from source, and debianizing a generic source application.  Paella 
makes use of mini-dinstall to maintain a local mini-repository and can install systems that 
reference that repository.  This provides a fairly simple way to add custom packages to the 
systems that you will be designing.

If you feel that you may benefit out of paella, here is how to get started.  If you don't want to
use the apt source above, you can check it out from subversion at berlios.  Paella
depends on Useless.  Useless is a collection of python modules that I use in other database 
applications.

to get useless:
svn checkout svn://svn.berlios.de/useless/trunk useless

to get paella:
svn checkout svn://svn.berlios.de/paella/trunk paella

You can build the packages with debuild, or fakeroot debian/rules binary.


--------------------------------------

Hardware Recommendations
------------------------------------------

Since the paella-nfsinstaller runs on a nfsroot, it is necessary to have some sort of network 
to support this.  Paella works best with at least one dedicated server and a management 
desktop, both running debian.  

Server:

The server will be responsible for running the nfs-server, the boot-server, the postgresql 
server, and the webserver. It is recommended that you have a local mirror of a debian 
repository on the server, and have it accessible over http.  You should also install the 
paella-debrepos package on this machine to create and maintain your custom debian 
repository.

	Database Setup::
		
		apt-get install postgresql
		su postgres
		createuser -a -d adminuser
		createuser -A -D paella
		createlang plpgsql template1	
		exit
		su adminuser createdb paella

You should setup /etc/postgresql/pg_hba.conf to allow access to the database by
paella from anywhere on the local network, and allow adminuser from your management
desktop.

The setup of the boot-server and the nfs-server are beyond the scope of this 
document, but the profiles are defined in the default database provided with paella.  So 
instead of taking the time to setup the boot-server and nfs-server manually, you can use the 
paella-chroot-install script to create the machine and tar it up.

Desktop:

The desktop should be about 400MHz Pentium or better with >= 1024x768 resolution, 
capable of running kde.  It is necessary to have access to your database on the server.  You
should also have your EDITOR environment variable set to something that will pop-up 
a window in X.  On this machine you will want to install the paella-admin and the 
paella-defaultdb packages.  The default config file is located at /etc/paellarc.  You will
probably want to copy this to ~/.paellarc and edit it.


-----------------------------------

Local Debian Repository
------------------------------------

Paella is built to make use of you local debian repository.  The paella-debrepos package 
uses (and depends on) mini-dinstall.  If you haven't used mini-dinstall, you should review 
the documentation for it.  Install the paella-debrepos package on the server.  The init script 
should fail because you are likely not to have a debrepos user.  This will be fixed later.  
Anyway, in the root of the debian mirror, there needs to be a 'local' directory.  The 
mini-dinstall daemon will be run from here. In the 'local' directory there needs to be a 
directory for each suite you have in paella, plus one called 'common'.

------------------------------------

Using Paella-Management
-------------------------------------

The management interface is going through changes.  Paella started with a gtk interface, 
and as time passed, the qt/kde toolkit started looking more appealing.  As a result, the
gtk interface works, but it is sloppy, and not going to be fixed.  The kde interface won't do 
very much right now, but bugs will be fixed on it.  A good portion of setting up and 
configuring the machines is done with the gtk interface, so for the time being, anybody 
using paella will have to bear through using it until the kde interface is ready.


-----------------------------------------------------

Environment Variables used by Paella
------------------------------------------------------

these are used to help override a configured db connection:
PAELLA_DBHOST
PAELLA_DBNAME

these are used in the installers:
PAELLA_TRAIT
PAELLA_TARGET
PAELLA_MACHINE
PAELLA_PROFILE
PAELLA_LOGFILE
LOGFILE -- this needs to be deprecated
FAKE_START_STOP_DAEMON
DEBIAN_FRONTEND

These are used in scripts and are mostly unimportant:
SUITES
USER
PATH

these are used in the kernelbuilder:
INITRD_OK
CONCURRENCY_LEVEL


.. _mounts: #mount
.. _families: #family
.. _profiles: #profile
.. _filesystems: #filesystem
.. _machine_type: #machine-type
.. _machine_types: #machine-type
.. _traits: #trait
.. _machines: #machine
