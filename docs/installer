.. -*- mode: rst -*-

Paella Installer
==========================

.. contents:: :backlinks: entry


Installer
==========

The installers in paella are layered.  There is a `trait installer`_, a `profile installer`_,
and a `nfs installer`_.  The installers are layered to make the whole installing
operation more structured.  The trait installer is the simplest and contains everything 
needed for installing a trait.  The profile installer contains a trait installer, and it is 
responsible for installing profiles.  The nfs installer contains a profile installer and is used
to install a profile on a machine.  There is also a chroot installer that will install a profile
to a target directory.

Trait Installer
--------------------------

The trait installer is responsible for installing a trait to a target location.
It is pretty dumb as it doesn't check to see if a parent has been installed or not.
This class should only be instantiated as a member of the `profile installer`_ class,
or a similiar class because the profiledata and familydata members start out empty.

- default trait install processes (in order)

  + **pre** 

    - special script step

    - if it exists, run the script before anything else

  + **remove**

    - remove packages marked remove in trait's package list

  + **install**

    - install packages marked install in trait's package list

  + **templates**

    - install the templates for the trait

  + **config**

    - currently doesn't do anything, can be used for a script

  + **chroot** 

    - special script step

    - if it exists, run the script chrooted in the target

  + **reconfig**

    - runs dpkg-reconfigure -plow on packages marked
      reconfig in the trait's package list.

  + **post**
    
    - special script step

    - if it exists, run the script after everything else

- the default trait processes can be overridden

  + put a comma separated list of processes in the default_environment
    under the section, **installer**, and the option **trait_processes**.

Profile Installer
---------------------

The profile installer can be instantiated by itself.  It contains a trait installer.
It is responsible for installing a profile to a target location.  A profile is the minimum
install-able object, you can't install a trait alone, but you can have a profile with one trait
in it.  The profile installer is responsible for making the complete list of traits that will be
installed.  The list is composed of the traits listed in the profile itself, and all of their implied
parents, ordered for install.  The profile installer then calls its trait installer for each trait
in the list.


Nfs Installer
-----------------

The nfs installer is responsible for installing a machine to a target location.  This is the
installer that will be run on a machine to be installed.  This installer contains a profile
installer.  The nfs installer will do all of the hardware related functions that are necessary
to setup a target location for its profile installer.  The nfs installer will also setup the fstab,
apt sources, and kernel for the machine.


Installer Toolkit
---------------------

The installer toolkit is made to be used in the trait scripts.  It can't be
used for the chroot script, unless you have paella configured on the
target system.  It is the job of the installer toolkit to provide you with a
good set of tools contained within the toolkit object, so that your scripts
contain a minimum of boilerplate type code.


Automatic Install
-----------------------

Automatic installation is supported.  The setup if fairly simple.  There
is no gui wrapper around parts of it yet, so to really use it, you will
have to use python interactively, or psql.  There is a script on the nfs 
installer called paella-submit-machine.  You pass it a machine name 
argument

New Installer Outline
---------------------------

Here is an outline of the new installer system.  It is centered around a 
base processor class.  The base processor class has a list of processes and a map
that links the processes to methods in the processor class.  The base processor includes 
a logging object and pre/post hooks that can be applied to each process.  A processor can 
have a processor as an attribute, and have it's run_all_processes method invoked as a 
process.  In this manner, processors can be chained together.  Each process can have 
a script attached to it.  This script will be invoked instead of the normal process if it is 
present.  It is up to the subclass to define a make_script method to do this.


Each installer object will be a subclass of the base processor.

class hierarchy

+ **BaseProcessor(object)**
  
  - This class is not meant to be instantiated, but to be subclassed.  It
    won't work on it's own.  It expects the subclass to provide a python
    logger at self.log .

+ **BaseInstaller(BaseProcessor)**

  - properties:

    - has a target, can create target directory

    - there is no process list in this class

    - process list to be defined in subclass

    - logging is setup here

    - takes a db connection as init arg

    - suite is set here, base_suite is also determined

    
		
+ **ChrootInstaller(BaseInstaller)**

  - properties:

    - process list defined

    - has installer attribute (usually ProfileInstaller)

    - set profile and target path before processing

  - processes:

    - ready_target

    - bootstrap

    - mount_target_proc

    - mount_target_sys

    - make_device_entries (probably deprecated by udev)

    - apt_sources_installer

    - ready_base_for_install

    - pre_install

    - install

    - post_install

    - apt_sources_final

    - umount_target_sys

    - umount_target_proc

+ **MachineInstaller(ChrootInstaller)**

  - processes:

    - pre - MachineInstaller

    - setup_disks - MachineInstaller

    - ready_target - inherit from ChrootInstaller

    - mount_target - MachineInstaller

    - bootstrap - inherit from ChrootInstaller

    - mount_target_proc - inherit from ChrootInstaller

    - mount_target_sys - inherit from ChrootInstaller

    - make_device_entries (probably deprecated by udev) - inherit from ChrootInstaller

    - apt_sources_installer - inherit from ChrootInstaller

    - ready_base_for_install - inherit from ChrootInstaller

    - pre_install - inherit from ChrootInstaller

    - install - inherit from ChrootInstaller 

    - post_install - inherit from ChrootInstaller

    - install_fstab 

    - install_modules

    - install_kernel

    - apt_sources_final

    - umount_target_proc

    - post


+ **TraitInstaller(BaseInstaller)**

  - properties:

    - created from ProfileInstaller

  - processes:

    - pre

    - remove

    - install

    - templates

    - config

    - chroot

    - reconfig

    - post


+ **ProfileInstaller(BaseInstaller)**

  - properties:

    - created with a chroot installer as a parent
    
    - process list is generated from the ordered list of traits to be 
      installed for the process.

    

		



------------------------------------------------

.. _mounts: #mount
.. _families: #family
.. _profiles: #profile
.. _filesystems: #filesystem
.. _machine_type: #machine-type
.. _machine_types: #machine-type
.. _traits: #trait
.. _machines: #machine
