#!/usr/bin/env python
import os, sys
import subprocess
import random

DPKG_ARCH_BINARY = "/usr/bin/dpkg-architecture"
USER = os.environ['USER']
REPREPRO_BASE = '/srv/debrepos/debian'
REPREPRO_CONF_DIR = os.path.join(REPREPRO_BASE, 'conf')

# 46925553 is wheezy automatic
DEBIAN_REPOS_KEYID = '46925553'

# if you leave MAIN_MIRROR blank, this script will
# determine it from the first deb line in /etc/apt/sources.list
MAIN_MIRROR = ''
FALLBACK_MIRROR = 'http://ftp.de.debian.org/debian'
SECURITY_MIRROR = 'http://security.debian.org/'

def get_arch():
    proc = subprocess.Popen([DPKG_ARCH_BINARY], stdout=subprocess.PIPE)
    arch_line = None
    for line in proc.stdout:
        if line.startswith('DEB_HOST_ARCH='):
            arch_line = line.strip()
            arch = arch_line.split('=')[1]
    if arch_line is None:
        raise RuntimeError , 'Host architecture not found.'
    return arch

def get_gpg_keyid(username=USER):
    cmd = ['gpg', '--list-key', username]
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    pub_line = None
    for line in proc.stdout:
        if line.startswith('pub'):
            pub_line = line.strip()
            pub, size_id, kdate = pub_line.split()
            keyid = size_id.split('/')[1]
    if pub_line is None:
        raise RuntimeError , 'gpg key not found'
    return keyid

def gpg_recv_key(keyid):
    cmd = ['gpg', '--recv-keys', keyid]
    subprocess.check_call(cmd)

def import_apt_key(keyid):
    export_cmd = ['sudo', 'apt-key', 'export', keyid]
    import_cmd = ['gpg', '--import']
    export_proc = subprocess.Popen(export_cmd, stdout=subprocess.PIPE)
    import_proc = subprocess.Popen(import_cmd, stdin=export_proc.stdout)
    retcode = import_proc.wait()
    if retcode:
        raise RuntimeError , "gpg returned %d" % retcode
    
def gpg_export_key(keyid, filename):
    cmd = ['gpg', '--export', '-a', keyid]
    subprocess.check_call(cmd, stdout=file(filename, 'w'))
    
def initialize_debian_repositoryOrig(basedir):
    if not os.path.isdir(basedir):
        cmd = ['sudo', 'mkdir', basedir]
        subprocess.check_call(cmd)
    here = os.getcwd()
    os.chdir('/freespace/debian')
    subprocess.check_call(['sudo', 'chown', '-R', 'paella:staff', '.'])
    os.chdir(here)
    os.mkdir('/freespace/debian/conf')
    outfile = file('/freespace/debian/conf/local-packages', 'w')
    subprocess.check_call(['dpkg', '--get-selections'], stdout=outfile)
    outfile.close()
    listfiles = ['extra-packages', 'startup-packages', 'sid-fai']
    for listfile in listfiles:
        fullpath = os.path.join('/usr/local/share/paella/reprepro', listfile)
        cmd = ['cp', fullpath, '/freespace/debian/conf']
        subprocess.check_call(cmd)
        confpath = os.path.join('/freespace/debian/conf', listfile)
        subprocess.check_call(['chmod', '+w', confpath])
        
def initialize_debian_repository(basedir):
    if not os.path.isdir(basedir):
        cmd = ['sudo', 'mkdir', '-p', basedir]
        subprocess.check_call(cmd)
    return
    here = os.getcwd()
    os.chdir('/freespace/debian')
    subprocess.check_call(['sudo', 'chown', '-R', 'paella:staff', '.'])
    os.chdir(here)
    os.mkdir('/freespace/debian/conf')
    outfile = file('/freespace/debian/conf/local-packages', 'w')
    subprocess.check_call(['dpkg', '--get-selections'], stdout=outfile)
    outfile.close()
    listfiles = ['extra-packages', 'startup-packages', 'sid-fai']
    for listfile in listfiles:
        fullpath = os.path.join('/usr/local/share/paella/reprepro', listfile)
        cmd = ['cp', fullpath, '/freespace/debian/conf']
        subprocess.check_call(cmd)
        confpath = os.path.join('/freespace/debian/conf', listfile)
        subprocess.check_call(['chmod', '+w', confpath])
        

def get_main_mirror():
    aptline = None
    for line in file('/etc/apt/sources.list'):
        if aptline is None:
            if line.startswith('deb'):
                aptline = line.strip()
                mirror = line.split()[1]
    if aptline is None:
        raise RuntimeError , "main mirror not found in /etc/apt/sources.list"
    return mirror

# perform system checks

if not os.path.isfile(DPKG_ARCH_BINARY):
    raise RuntimeError , "%s not found, aborting." % DPKG_ARCH_BINARY
else:
    print "%s located." % DPKG_ARCH_BINARY 

# initialize_debian_repository
initialize_debian_repository(REPREPRO_BASE)

# export key to local repository
keyid = get_gpg_keyid(username=USER)
gpgfilename = os.path.join(REPREPRO_BASE, 'paella.gpg')
gpg_export_key(keyid, gpgfilename)
print "Exported", gpgfilename


# add key to apt
print "Adding paella repository key to apt..."
subprocess.check_call(['sudo', 'apt-key', 'add', gpgfilename])

# make sure reprepro conf directory exists
if not os.path.isdir(REPREPRO_CONF_DIR):
    os.mkdir(REPREPRO_CONF_DIR)

# import official debian archive key to personal keyring
#gpg_recv_key(DEBIAN_REPOS_KEYID)
import_apt_key(DEBIAN_REPOS_KEYID)


# generate configuration
arch = get_arch()
main_mirror = MAIN_MIRROR
if not main_mirror:
    main_mirror = get_main_mirror()
fallback_mirror = FALLBACK_MIRROR
security_mirror = SECURITY_MIRROR
# keyid defined just above
template_data = dict(arch=arch, keyid=keyid,
                     main_mirror=main_mirror, fallback_mirror=fallback_mirror,
                     security_mirror=security_mirror)

# distribution stanzas
debian_stanza = """\
Origin: Debian
Label: Debian
Suite: stable
Codename: wheezy
Architectures: i386
Components: main contrib non-free
UDebComponents: main contrib non-free
Description: Debian 7.4 Released 08 February 2014
Log: logfile
Update: main di
SignWith: %(keyid)s
"""

debian_security_stanza = """Origin: Debian
Label: Debian-Security
Suite: stable/updates
Codename: lenny/updates
Version: 5.0
FakeComponentPrefix: updates
Architectures: %(arch)s source
Components: main contrib non-free
Description: Debian 5.0 Security Updates
Log: logfile
Update: - lenny-security
SignWith: %(keyid)s
"""
paella_stanza = """Origin: Paella
Label: Paella
Suite: paella
Version: None
Codename: paella
Architectures: %(arch)s source
Components: main contrib non-free
Log: logfile
Update: sid-fai
SignWith: %(keyid)s
"""



# make distributions file
distfilename = os.path.join(REPREPRO_CONF_DIR, 'distributions')
distfile = file(distfilename, 'w')
distfile.write(debian_stanza % template_data)
distfile.write('\n')
#distfile.write(debian_security_stanza % template_data)
#distfile.write('\n')
#distfile.write(paella_stanza % template_data)
distfile.close()
print "Created", distfilename

sys.exit(0)
