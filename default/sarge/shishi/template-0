#
# Sample configuration file for ISC dhcpd for Debian
#
# $Id: dhcpd.conf,v 1.1.1.1 2002/05/21 00:07:44 peloy Exp $
#

# The ddns-updates-style parameter controls whether or not the server will
# attempt to do a DNS update when a lease is confirmed. We default to the
# behavior of the version 2 packages ('none', since DHCP v2 didn't
# have support for DDNS.)
ddns-update-style <--|dhcp_server_ddns_update_style|-->;
omapi-port 7911;
key <--|default_standard_key_name|--> {
	algorithm hmac-md5;
	secret <--|default_standard_key|-->;
};

# option definitions common to all supported networks...
option domain-name "<--|base_domain|-->";
option domain-name-servers <--|base_hostname|-->.<--|base_domain|-->;

default-lease-time <--|dhcp_server_default_lease_time|-->;
max-lease-time <--|dhcp_server_max_lease_time|-->;


# If this DHCP server is the official DHCP server for the local
# network, the authoritative directive should be uncommented.
<--|dhcp_server_authoritative|-->;

# Use this to send dhcp log messages to a different log file (you also
# have to hack syslog.conf to complete the redirection).
log-facility local7;

# No service will be given on this subnet, but declaring it helps the 
# DHCP server to understand the network topology.



host <--|shishi_paella_mainhost|--> {
	hardware ethernet <--|shishi_paella_mainhost_hwaddr|-->;
	fixed-address <--|shishi_paella_mainhost_ip|-->;
}
host <--|shishi_paella_desktop|--> { 
        hardware ethernet <--|shishi_paella_desktop_hwaddr|-->; 
        fixed-address <--|shishi_paella_desktop_ip|-->; 
}
#host myeye {
#	hardware ethernet 00:50:e4:20:55:15;
#	fixed-address 10.0.1.2;
#	option routers 10.0.1.1;
#	}
#host puppy {
#	hardware ethernet 00:30:1b:2f:41:12;
#	option root-path "/var/lib/diskless/default/root";
#	next-server paella.gregscomputerservice.com;
#	fixed-address puppy.gregscomputerservice.com;
#	option host-name "puppy";
#	}
#host kitten {
#	hardware ethernet 00:30:1b:2d:2e:59;
#	option root-path "/var/lib/diskless/default/root";
#	next-server paella.gregscomputerservice.com;
#	fixed-address kitten.gregscomputerservice.com;
#	option host-name "kitten";
#	}

#host master {
#	hardware ethernet 00:30:1b:2d:2e:59;
#	option root-path "/var/lib/diskless/default/root";
#	next-server paella.gregscomputerservice.com;
#	fixed-address master.gregscomputerservice.com;
#	option host-name "master";
#	}



#host spike {
#hardware ethernet 00:50:fc:8f:a3:5c;
#option root-path "/home/spike/nfsroot";
#next-server paella.gregscomputerservice.com;
#fixed-address spike.gregscomputerservice.com;
#option host-name "spike";
#}
#st testbox {
#hardware ethernet 00:30:1b:2f:47:cc;
#	option root-path "/usr/lib/fai/nfsroot";
#	next-server paella.gregscomputerservice.com;
#	fixed-address testbox.gregscomputerservice.com;
#	filename "pxelinux.0";
#	option host-name "testbox";
#	}
#host premio {
#	hardware ethernet 00:50:04:af:28:79;
#	fixed-address premio.gregscomputerservice.com;
#	}
#host mach-e {
#	hardware ethernet 00:04:5a:99:0c:1a;
#	fixed-address mach-e.gregscomputerservice.com;
#	}
#host jukebox {
#	hardware ethernet 00:e0:29:6e:09:39;
#	option root-path "/opt/jukebox/nfsroot";
#	next-server paella.gregscomputerservice.com;
#	fixed-address jukebox.gregscomputerservice.com;
#	option host-name "jukebox";
#	}
#
host <--|shishi_paella_laptop|--> {
	hardware ethernet <--|shishi_paella_laptop_hwaddr|-->;
	option root-path "<--|shishi_paella_rootpath|-->";
	next-server <--|shishi_paella_mainhost|-->.<--|base_domain|-->;
	filename "<--|shishi_paella_bootfile|-->";
	fixed-address <--|shishi_paella_laptop|-->.<--|base_domain|-->;
	option host-name "<--|shishi_paella_laptop|-->";
	}

#host bard {
#	hardware ethernet 00:40:45:12:54:62;
#	fixed-address bard.gregscomputerservice.com;
#	option host-name "bard";
#	}

#0:b:db:b5:e1:9
#host bailey {
#	hardware ethernet 0:30:1b:ad:b8:93;
#	option root-path "/usr/lib/fai/nfsroot";
#	next-server paella.gregscomputerservice.com;
#	filename "pxelinux.0";
#	fixed-address bailey.gregscomputerservice.com;
#	option host-name "bailey";
#	}


#subnet 10.152.187.0 netmask 255.255.255.0 {
#}

# This is a very basic subnet declaration.

subnet <--|default_local_network|--> netmask <--|default_local_netmask|--> {
  range <--|dhcp_server_main_range|-->;
  option routers <--|dhcp_server_main_router|-->;
  option root-path "<--|shishi_paella_rootpath|-->";
  ddns-domainname "<--|base_domain|-->";
  ddns-updates on;
  do-forward-updates on;
  option domain-name "<--|base_domain|-->";
  filename "<--|shishi_paella_bootfile|-->";
  next-server <--|shishi_paella_laptop_ip|-->;
}

# This declaration allows BOOTP clients to get dynamic addresses,
# which we don't really recommend.

#subnet 10.254.239.32 netmask 255.255.255.224 {
#  range dynamic-bootp 10.254.239.40 10.254.239.60;
#  option broadcast-address 10.254.239.31;
#  option routers rtr-239-32-1.example.org;
#}

# A slightly different configuration for an internal subnet.
#subnet 10.5.5.0 netmask 255.255.255.224 {
#  range 10.5.5.26 10.5.5.30;
#  option domain-name-servers ns1.internal.example.org;
#  option domain-name "internal.example.org";
#  option routers 10.5.5.1;
#  option broadcast-address 10.5.5.31;
#  default-lease-time 600;
#  max-lease-time 7200;
#}

# Hosts which require special configuration options can be listed in
# host statements.   If no address is specified, the address will be
# allocated dynamically (if possible), but the host-specific information
# will still come from the host declaration.

#host passacaglia {
#  hardware ethernet 0:0:c0:5d:bd:95;
#  filename "vmunix.passacaglia";
#  server-name "toccata.fugue.com";
#}

# Fixed IP addresses can also be specified for hosts.   These addresses
# should not also be listed as being available for dynamic assignment.
# Hosts for which fixed IP addresses have been specified can boot using
# BOOTP or DHCP.   Hosts for which no fixed address is specified can only
# be booted with DHCP, unless there is an address range on the subnet
# to which a BOOTP client is connected which has the dynamic-bootp flag
# set.
#host fantasia {
#  hardware ethernet 08:00:07:26:c0:a5;
#  fixed-address fantasia.fugue.com;
#}

# You can declare a class of clients and then do address allocation
# based on that.   The example below shows a case where all clients
# in a certain class get addresses on the 10.17.224/24 subnet, and all
# other clients get addresses on the 10.0.29/24 subnet.

#class "foo" {
#  match if substring (option vendor-class-identifier, 0, 4) = "SUNW";
#}

#shared-network 224-29 {
#  subnet 10.17.224.0 netmask 255.255.255.0 {
#    option routers rtr-224.example.org;
#  }
#  subnet 10.0.29.0 netmask 255.255.255.0 {
#    option routers rtr-29.example.org;
#  }
#  pool {
#    allow members of "foo";
#    range 10.17.224.10 10.17.224.250;
#  }
#  pool {
#    deny members of "foo";
#    range 10.0.29.10 10.0.29.230;
#  }
#}
zone <--|base_domain|-->. {
primary 127.0.0.1;
key <--|default_standard_key_name|-->;
}

zone <--|default_reversed_local_zone|-->.in-addr.arpa. {
primary 127.0.0.1;
key <--|default_standard_key_name|-->;
}

